<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');include_once(APPPATH."controllers/parentController.php");class CarriageContractors extends ParentController {    //public variables...    public $login;    public function __construct()    {        parent::__construct();    }    /* The default function that gets called when visiting the page */    public function index($section = '')    {        if($this->login == true){            $name = (isset($_GET['contractor']))?$_GET['contractor']:'';            $keys = array(                'name'=>$name,            );            //defining the sorting column            $sort = array(                'sort_by'=>(isset($_GET['sort_by']))?$_GET['sort_by']:'entryDate',                'order' => (isset($_GET['order']))?$_GET['order']:'asc',            );            ///////////////////////////////////////////////////////////////            //counting total agents            $num_of_records = $this->carriageContractors_model->count_searched_contractors($keys);            $num_of_records = ($num_of_records == 0)?1:$num_of_records;            $config = $this->helper_model->pagination_configs("carriageContractors/index/?", "carriage_contractors", $num_of_records);            $this->pagination->initialize($config);            $pageNumber = 0;            if(isset($_GET['page'])){                $pageNumber = $_GET['page'];                if($pageNumber>=0){$pageNumber = $pageNumber;}else{ $pageNumber = 0;}            }            $headerData = array(                'title' => 'Virik-Logistics | Carriage Contractors',                'page' => 'carriageContractors',            );            $bodyData = array(                'contractors' => '',                'section' => '',                'someMessage' => '',                'pages' => $this->pagination->create_links(),                'columns'=>array(),            );            if($section == '' || $section == 'all'){$bodyData['section'] = 'all';}else if($section== 'add'){ $bodyData['section'] = 'add';}            //deleting the customer*****************//            if(isset($_GET['del'])){                $_POST['del'] = $_GET['del'];                $this->form_validation->set_rules('del', 'Delete Contractor', 'required|numeric|callback__validate_contractor_deleting');                if ($this->form_validation->run() == true)                {                    if( $this->helper_model->delete_record('carriage_contractors',$_GET['del']) == true){                        $bodyData['someMessage'] = array('message'=>'Contractor Deleted Successfully!', 'type'=>'alert-success');                    }else{                        $bodyData['someMessage'] = array('message'=>'Some Unknown database fault happened. please try again a few moments later. Or you can contact your system provider.<br>Thank You', 'type'=>'alert-warning');                    }                }            }            //////////////////////////////////////////////////////////            if(isset($_POST['addCarriageContractor'])){                if($this->form_validation->run('add_contractor') == true){                    if( $this->carriageContractors_model->add_contractor() == true){                        $bodyData['someMessage'] = array('message'=>'Contractor Added Successfully!', 'type'=>'alert-success');                    }else{                        $bodyData['someMessage'] = array('message'=>'Some Unknown database fault happened. please try again a few moments later. Or you can contact your system provider.<br>Thank You', 'type'=>'alert-warning');                    }                }            }            $bodyData['contractors'] = $this->carriageContractors_model->search_limited_contractors($config["per_page"], $pageNumber, $keys, $sort);            if(isset($_GET['print'])){                if(isset($_POST['check'])){                    $bodyData['contractors'] = $this->helper_model->filter_records($bodyData['contractors'], $_POST['check'],"id");                }                if(isset($_POST['column'])){                    $bodyData['columns'] = $_POST['column'];                }                $this->load->view('carriageContractors/components/print_contractors', $bodyData);            }else{                $this->load->view('components/header', $headerData);                $this->load->view('carriageContractors/welcome', $bodyData);                $this->load->view('components/footer');            }        }else{            $this->load->view('admin/login');        }    }    public function profile($c_id = '', $req ='' )    {        if($c_id == ''){            $this->index();        }else{            $headerData = array(                'title' => 'Virik-Logistics | Carriage | Profile',                'page' => 'carriageContractors',            );            $bodyData = array(                'profile' => $this->carriageContractors_model->carriageContractor($c_id),            );            $bodyData['contractors'] = $this->carriageContractors_model->carriageContractors();            $this->load->view('components/header', $headerData);    //HEADER DATA            //check if we some data received of not against the request?            if($bodyData['profile'] != ''){                $this->load->view('carriageContractors/profile', $bodyData);            }else{                $this->load->view('components/recordNotFound');            }            $this->load->view('components/footer');     //footer data        }    }    public function accounts($c_id = '', $month ='' )    {        if($c_id == ''){            $this->index();        }else{            $keys['from'] = (isset($_GET['from']))?$_GET['from']:'';            $keys['to'] = (isset($_GET['to']))?$_GET['to']:'';            $keys['trip_id'] = (isset($_GET['trip_id']))?$_GET['trip_id']:'';            $keys['trip_type'] = (isset($_GET['trip_type']))?$_GET['trip_type']:'';            $keys['tanker'] = (isset($_GET['tanker']))?$_GET['tanker']:'';            $keys['entryDate'] = (isset($_GET['entry_date']))?$_GET['entry_date']:'';            $keys['product'] = (isset($_GET['product']))?$_GET['product']:'';            $keys['source'] = (isset($_GET['source']))?$_GET['source']:'';            $keys['destination'] = (isset($_GET['destination']))?$_GET['destination']:'';            $keys['company'] = (isset($_GET['company']))?$_GET['company']:'';            $keys['cmp_freight_unit'] = (isset($_GET['company_freight_unit']))?$_GET['company_freight_unit']:'';            $keys['wht'] = (isset($_GET['wht']))?$_GET['wht']:'';            $keys['company_commission'] = (isset($_GET['company_commission']))?$_GET['company_commission']:'';            $keys['company_commission_status'] = (isset($_GET['company_commission_status']))?$_GET['company_commission_status']:'';            $keys['contractor_freight_status'] = (isset($_GET['contractor_freight_status']))?$_GET['contractor_freight_status']:'';            $keys['contractor_commission'] = (isset($_GET['contractor_commission']))?$_GET['contractor_commission']:'';            $keys['contractor_commission_status'] = (isset($_GET['contractor_commission_status']))?$_GET['contractor_commission_status']:'';            $keys['customer'] = (isset($_GET['customer']))?$_GET['customer']:'';            $keys['cst_freight_unit'] = (isset($_GET['cst_freight_unit']))?$_GET['cst_freight_unit']:'';            $keys['customer_freight_status'] = (isset($_GET['customer_freight_status']))?$_GET['customer_freight_status']:'';            ///////////////////////////////////////////////////////////////            $total_rows = $this->accounts_model->count_searched_contractor_accounts($c_id, $keys);            $total_rows = ($total_rows == 0)?1:$total_rows;            /////////////////            //computing the url for page number            $query_string = explode('&page',$_SERVER['QUERY_STRING']);            $query_string = $query_string[0];            //////////////////////////////////            //********Calculating Records/Page***********//            if(isset($_GET['pagination']) && $_GET['pagination'] == 'false'){                $per_page = $total_rows;            }else{                $per_page = 'false';            }            if(isset($_GET['print'])){                $per_page = $total_rows;            }            /////****************************************//            $config = $this->helper_model->pagination_configs("carriageContractors/accounts/$c_id/?".$query_string, "", $total_rows, $per_page);            $this->pagination->initialize($config);            $pageNumber = 0;            if(isset($_GET['page'])){                $pageNumber = $_GET['page'];                if($pageNumber>=0){$pageNumber = $pageNumber;}else{ $pageNumber = 0;}            }            //////////////////////////////////////////////////////////////////////////////////            $headerData = array(                'title' => 'Virik Logistics | Contractor | Accounts',                'page' => 'carriageContractors',            );            if($month == ''){$month = date('Y-m');}            $bodyData = array(                'profile' => $this->carriageContractors_model->carriageContractor($c_id),                'accounts' => '',                'section' => '',                'someMessage' => '',                'month' => $month,                'columns'=>array(),                'pages'=>$this->pagination->create_links(),            );            if(isset($_POST['add_contractor_payment'])){                if($this->form_validation->run('add_contractor_payment') == true){                    if( $this->accounts_model->add_contractor_payment() == true){                        $bodyData['someMessage'] = array('message'=>'Payment Added Successfully!', 'type'=>'alert-success');                    }else{                        $bodyData['someMessage'] = array('message'=>'Some Unknown database fault accured. please try again a few moments later. Or you can contact your system provider.<br>Thank You', 'type'=>'alert-warning');                    }                }            }            if(isset($_POST['add_mass_payment'])){                if($this->accounts_model->contractor_mass_payment($this->input->post('trip_ids')) == true){                    $bodyData['someMessage'] = array('message'=>'Payment Added Successfully!', 'type'=>'alert-success');                }else{                    $bodyData['someMessage'] = array('message'=>'Some Unknown database fault accured. please try again a few moments later. Or you can contact your system provider.<br>Thank You', 'type'=>'alert-warning');                }            }            if(isset($_POST['add_mass_credit'])){                $this->form_validation->set_rules('form_resubmission', 'Form Resubmission', 'required|callback__check_re_submission[voucher_journal]');                if ($this->form_validation->run() == true)                {                    if($this->accounts_model->credit_mass_payment_contractor("contractors",$c_id) == true){                        $bodyData['someMessage'] = array('message'=>'Payment Added Successfully!', 'type'=>'alert-success');                    }else{                        $bodyData['someMessage'] = array('message'=>'Some Unknown database fault accured. please try again a few moments later. Or you can contact your system provider.<br>Thank You', 'type'=>'alert-warning');                    }                }            }            //deleting account entry            if(isset($_POST['entry_id'])){                if($this->accounts_model->delete_contractor_payment($this->input->post('entry_id')) == true){                    $bodyData['someMessage'] = array('message'=>'Payment deleted Successfully!', 'type'=>'alert-success');                }else{                    $bodyData['someMessage'] = array('message'=>'Some Unknown database fault accured. please try again a few moments later. Or you can contact your system provider.<br>Thank You', 'type'=>'alert-warning');                }            }            //saving contractor credit voucher            if(isset($_POST['save_contractor_credit_voucher'])){                if($this->accounts_model->save_voucher("contractors") == true){                    $bodyData['someMessage'] = array('message'=>'voucher saved Successfully!', 'type'=>'alert-success');                }else{                    $bodyData['someMessage'] = array('message'=>'Some Unknown database fault accured. please try again a few moments later. Or you can contact your system provider.<br>Thank You', 'type'=>'alert-warning');                }            }            $bodyData['accounts'] = $this->accounts_model->contractor($c_id, $keys, $config["per_page"], $pageNumber);            $bodyData['companies'] = $this->companies_model->companies();            $bodyData['customers'] = $this->customers_model->customers();            $bodyData['products'] = $this->routes_model->products();            $bodyData['cities'] = $this->routes_model->cities();            $bodyData['contractors'] = $this->carriageContractors_model->carriageContractors();            $bodyData['tankers'] = $this->tankers_model->tankers();            if(isset($_GET['print'])){                if(isset($_POST['check'])){                    $bodyData['accounts'] = $this->helper_model->filter_records($bodyData['accounts'], $_POST['check'],"trip_id");                }                if(isset($_POST['column'])){                    $bodyData['columns'] = $_POST['column'];                }                $this->load->view('carriageContractors/components/print_accounts', $bodyData);            }else{                $this->load->view('components/header', $headerData);                $this->load->view('carriageContractors/accounts', $bodyData);                $this->load->view('components/footer');            }        }    }    public function contractor_mass_payment($trip_ids)    {        $trip_ids_str = $trip_ids;        $trip_ids = explode('_',$trip_ids_str);        $bodyData = array(            'trips'=>$this->trips_model->test_trips_details($trip_ids),            'trip_ids_str'=>$trip_ids_str,        );        $this->load->view('carriageContractors/components/contractor_mass_payment', $bodyData);    }    public function contractor_mass_credit($trip_ids, $voucher_type)    {        $trip_ids_str = $trip_ids;        $trip_ids = explode('_',$trip_ids_str);        $bodyData = array(            'trips'=>$this->trips_model->parametrized_trips_engine($trip_ids,"contractor_accounts"),            'trip_ids_str'=>$trip_ids_str,            'voucher_type'=>$voucher_type,            'form_id'=>($this->helper_model->last_id('voucher_journal')+1),        );        $this->load->view('carriageContractors/components/contractor_mass_credit', $bodyData);    }    public function add_contractor_payment($trip_detail_id, $contractor_id, $actual_freight, $remaining){        $bodyData = array(            'previous_payments' => $this->accounts_model->contractor_payments($trip_detail_id, $contractor_id),            'form_id'=>($this->helper_model->last_id('contractor_accounts')+1),            'trip_detail_id'=>$trip_detail_id,            'contractor_id'=>$contractor_id,            'actual_freight'=>$actual_freight,            'remaining'=>$remaining,        );        $this->load->view('carriageContractors/components/add_contractor_payment', $bodyData);    }    public function add_payment($trip_id, $contractor_id){        $bodyData = array(            'previous_payments' => $this->accounts_model->contractor_payments($trip_id, $contractor_id),            'form_id'=>($this->helper_model->last_id('contractor_accounts')+1),            'trip_id'=>$trip_id,            'contractor_id'=>$contractor_id,        );        $this->load->view('carriageContractors/components/add_payment', $bodyData);    }    public function open_contractor_credit_voucher_chit($trip_id, $trip_detail_id, $total_credit_amount, $voucher_type)    {        $bodyData['trip_id'] = $trip_id;        $bodyData['trip_detail_id'] = $trip_detail_id;        $bodyData['voucher_type'] = $voucher_type;        $bodyData['total_creditable_amount'] = $total_credit_amount;        $this->load->view('carriageContractors/components/contractor_credit_voucher_chit', $bodyData);    }    public function contact($c_id = '', $req ='' )    {        if($c_id == ''){            $this->index();        }else{            $headerData = array(                'title' => 'Virik-Logistics | Carriage | Contact',                'page' => 'carriageContractors',            );            $bodyData = array(                'contact' => $this->carriageContractors_model->carriageContractor($c_id),            );            $this->load->view('components/header', $headerData);    //HEADER DATA            //check if we some data received of not against the request?            if($bodyData['contact'] != ''){                $this->load->view('carriageContractors/contact', $bodyData);            }else{                $this->load->view('components/recordNotFound');            }            $this->load->view('components/footer');     //footer data        }    }    public function show_benefit($trip_id, $trip_detail_id, $product_type='white_oil')    {        $body_data = array(            'service_charges'=>$this->accounts_model->contractor_services_charges($trip_id, $trip_detail_id, $product_type),        );        $this->load->view('carriageContractors/components/show_benefits',$body_data);    }    public function home()    {    }    function _create_captcha(){        /*$words = array( '2', '3', '4', '5', '6','7', '8', '9','0', 'a', 'b','z', 'n', 'b','x', 'y', 'v');        $count = 1;        $word = "";        while($count < 3){            $word = $word.$words[mt_rand(0, 16)];            $count++;        }        $vals = array(            'word'      => strtolower($word),            'img_path'	=> './captcha/',            'img_url'	=> base_url().'captcha/',            'font_path'	=> 'fonts/DENMARK.ttf',            'img_width'	=> '210',            'img_height' => 40,            'expiration' => 20        );        $cap = create_captcha($vals);        return $cap;*/    }    function _validate_contractor_payment_amount($amount){        $previous_payments = $this->accounts_model->contractor_payments($this->input->post('trip_detail_id'), $this->input->post('contractor_id'));        $paid = 0;        foreach($previous_payments as $payment){            $paid+= $payment->amount;        }        if($amount > $this->input->post('actual_freight')-$paid){            $this->form_validation->set_message('_validate_contractor_payment_amount','Entry failed because of Invalid Freight Amount. Please try again.');            return false;        }        return true;    }    function _validate_contractor_deleting($contractor_id){        $used_in = '';        $trips = $this->db->get_where('trips',array('contractor_id'=>$contractor_id, 'active'=>1))->num_rows();        if($trips >=1){            $used_in = 'Trips, ';        }        $this->db->from('voucher_journal');        $this->db->join('voucher_entry','voucher_entry.journal_voucher_id = voucher_journal.id','left');        $where = "(voucher_entry.related_contractor = ".$contractor_id.")";        $this->db->where($where);        $this->db->where('voucher_journal.active',1);        $accounts = $this->db->get()->num_rows();        if($accounts >= 1){            $used_in .= 'Accounts';        }        if($used_in != ''){            $this->form_validation->set_message('_validate_contractor_deleting','This Contractor is being used in the other parts of the system! e.g('.$used_in.').');            return false;        }        return true;    }    function _check_credentials($str, $data){        /*list($table, $userField, $passField)=explode('.', $data);        //You have to change this line below        if($this->input->post('username') != "" && $this->input->post('password') != "" && $this->input->post('confirmCaptcha') != "" && $this->form_validation->captcha_check($this->input->post('confirmCaptcha'), 'captcha') == true){            //////////////////////////////////////////////////////////////////////////////////////////////////            $userName = $userField.".".$this->input->post('username');            $password = $passField.".".$this->input->post('password');            $credentials = $this->admin_model->check_credentials($table, $userName, $password);            if($credentials == false){                $this->form_validation->set_message('_check_credentials','Invalid Username/Password. Please try again');                return false;            }else{                return true;            }        }else{            return true;        }*/    }    function _check_re_submission($form_id, $table){        if($this->helper_model->re_submission($table, $form_id) == true){            $this->form_validation->set_message('_check_re_submission','Entry failed because of form re-submission.');            return false;        }        return true;    }}/* End of file welcome.php *//* Location: ./application/controllers/welcome.php */