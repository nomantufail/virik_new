<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');include_once(APPPATH."controllers/parentController.php");class Companies extends ParentController {    //public variables...    public $login;    public function __construct()    {        parent::__construct();    }    /* The default function that gets called when visiting the page */    public function index($section = '')    {        $name = (isset($_GET['company']))?$_GET['company']:'';        $keys = array(            'name'=>$name,        );        //defining the sorting column        $sort = array(            'sort_by'=>(isset($_GET['sort_by']))?$_GET['sort_by']:'entryDate',            'order' => (isset($_GET['order']))?$_GET['order']:'asc',        );        ///////////////////////////////////////////////////////////////        //counting total agents        $num_other_agents = $this->companies_model->count_searched_companies($keys);        $num_other_agents = ($num_other_agents == 0)?1:$num_other_agents;        $config = $this->helper_model->pagination_configs("companies/index/?", "companies", $num_other_agents);        $this->pagination->initialize($config);        $pageNumber = 0;        if(isset($_GET['page'])){            $pageNumber = $_GET['page'];            if($pageNumber>=0){$pageNumber = $pageNumber;}else{ $pageNumber = 0;}        }        $headerData = array(            'title' => 'Virik-Logistics | Companies',            'page' => 'companies',        );        $bodyData = array(            'companies' => '',            'section' => '',            'someMessage' => '',            'pages' => $this->pagination->create_links(),        );        if($section == '' || $section == 'all'){$bodyData['section'] = 'all';}else if($section== 'add'){ $bodyData['section'] = 'add';}        //deleting the customer*****************//        if(isset($_GET['del'])){            $_POST['del'] = $_GET['del'];            $this->form_validation->set_rules('del', 'Delete Company', 'required|numeric|callback__validate_company_deleting');            if ($this->form_validation->run() == true)            {                if( $this->helper_model->delete_record('companies',$_GET['del']) == true){                    $bodyData['someMessage'] = array('message'=>'Company Deleted Successfully!', 'type'=>'alert-success');                }else{                    $bodyData['someMessage'] = array('message'=>'Some Unknown database fault happened. please try again a few moments later. Or you can contact your system provider.<br>Thank You', 'type'=>'alert-warning');                }            }        }        //////////////////////////////////////////////////////////        if(isset($_POST['addCompany'])){            if($this->form_validation->run('add_company') == true){                if( $this->companies_model->add_companies() == true){                    $bodyData['someMessage'] = array('message'=>'Company Added Successfully!', 'type'=>'alert-success');                }else{                    $bodyData['someMessage'] = array('message'=>'Some Unknown database fault happened. please try again a few moments later. Or you can contact your system provider.<br>Thank You', 'type'=>'alert-warning');                }            }        }        $bodyData['companies'] = $this->companies_model->search_limited_companies($config["per_page"], $pageNumber, $keys, $sort);        if(isset($_GET['print'])){            if(isset($_POST['check'])){                $bodyData['companies'] = $this->helper_model->filter_records($bodyData['companies'], $_POST['check'],"id");            }            if(isset($_POST['column'])){                $bodyData['columns'] = $_POST['column'];            }            $this->load->view('companies/components/print_companies', $bodyData);        }else{            $this->load->view('components/header', $headerData);            $this->load->view('companies/welcome', $bodyData);            $this->load->view('components/footer');        }    }    public function profile($c_id = '', $req ='' )    {        if($c_id == ''){            $this->index();        }else{            $headerData = array(                'title' => 'Virik-Logistics | Companies | Company',                'page' => 'companies',            );            $bodyData = array(                'profile' => $this->companies_model->company($c_id),            );            $bodyData['companies'] = $this->companies_model->companies();            $this->load->view('components/header', $headerData);    //HEADER DATA            //check if we some data received of not against the request?            if($bodyData['profile'] != ''){                $this->load->view('companies/profile', $bodyData);            }else{                $this->load->view('components/recordNotFound');            }            $this->load->view('components/footer');     //footer data        }    }    public function accounts($c_id = '', $month ='' )    {        if($c_id == ''){            $this->index();        }else{            $keys['from'] = (isset($_GET['from']))?$_GET['from']:'';            $keys['to'] = (isset($_GET['to']))?$_GET['to']:'';            $keys['trip_id'] = (isset($_GET['trip_id']))?$_GET['trip_id']:'';            $keys['trip_type'] = (isset($_GET['trip_type']))?$_GET['trip_type']:'';            $keys['tanker'] = (isset($_GET['tanker']))?$_GET['tanker']:'';            $keys['entryDate'] = (isset($_GET['entry_date']))?$_GET['entry_date']:'';            $keys['product'] = (isset($_GET['product']))?$_GET['product']:'';            $keys['source'] = (isset($_GET['source']))?$_GET['source']:'';            $keys['destination'] = (isset($_GET['destination']))?$_GET['destination']:'';            $keys['freight_unit'] = (isset($_GET['company_freight_unit']))?$_GET['company_freight_unit']:'';            $keys['wht'] = (isset($_GET['wht']))?$_GET['wht']:'';            $keys['company_commission'] = (isset($_GET['company_commission']))?$_GET['company_commission']:'';            $keys['company_commission_status'] = (isset($_GET['company_commission_status']))?$_GET['company_commission_status']:'';            $keys['contractor'] = (isset($_GET['contractor']))?$_GET['contractor']:'';            $keys['contractor_freight_status'] = (isset($_GET['contractor_freight_status']))?$_GET['contractor_freight_status']:'';            ///////////////////////////////////////////////////////////////            $total_rows = $this->accounts_model->count_searched_company_accounts($c_id, $keys);            $total_rows = ($total_rows == 0)?1:$total_rows;            /////////////////            //computing the url for page number            $query_string = explode('&page',$_SERVER['QUERY_STRING']);            $query_string = $query_string[0];            //////////////////////////////////            //********Calculating Records/Page***********//            if(isset($_GET['pagination']) && $_GET['pagination'] == 'false'){                $per_page = $total_rows;            }else{                $per_page = 'false';            }            if(isset($_GET['print'])){                $per_page = $total_rows;            }            /////****************************************//            $config = $this->helper_model->pagination_configs("companies/accounts/$c_id/?".$query_string, "", $total_rows, $per_page);            $this->pagination->initialize($config);            $pageNumber = 0;            if(isset($_GET['page'])){                $pageNumber = $_GET['page'];                if($pageNumber>=0){$pageNumber = $pageNumber;}else{ $pageNumber = 0;}            }            //////////////////////////////////////////////////////////////////////////////////            $headerData = array(                'title' => 'Virik-Logistics | Companies | Accounts',                'page' => 'companies',            );            if($month == ''){$month = date('Y-m');}            $bodyData = array(                'profile' => $this->companies_model->company($c_id),                'accounts' => '',                'section' => '',                'someMessage' => '',                'month' => $month,                'columns'=>array(),                'pages'=>$this->pagination->create_links(),            );            if(isset($_POST['add_company_payment'])){                if($this->form_validation->run('add_company_payment') == true){                    if( $this->accounts_model->add_company_payment() == true){                        $bodyData['someMessage'] = array('message'=>'Payment Added Successfully!', 'type'=>'alert-success');                    }else{                        $bodyData['someMessage'] = array('message'=>'Some Unknown database fault accured. please try again a few moments later. Or you can contact your system provider.<br>Thank You', 'type'=>'alert-warning');                    }                }            }            if(isset($_POST['add_mass_payment'])){                if($this->accounts_model->company_mass_payment($this->input->post('trip_ids')) == true){                    $bodyData['someMessage'] = array('message'=>'Payment Added Successfully!', 'type'=>'alert-success');                }else{                    $bodyData['someMessage'] = array('message'=>'Some Unknown database fault accured. please try again a few moments later. Or you can contact your system provider.<br>Thank You', 'type'=>'alert-warning');                }            }            if(isset($_POST['entry_id'])){                if($this->accounts_model->delete_company_payment($this->input->post('entry_id')) == true){                    $bodyData['someMessage'] = array('message'=>'Payment deleted Successfully!', 'type'=>'alert-success');                }else{                    $bodyData['someMessage'] = array('message'=>'Some Unknown database fault accured. please try again a few moments later. Or you can contact your system provider.<br>Thank You', 'type'=>'alert-warning');                }            }            $bodyData['accounts'] = $this->accounts_model->company($c_id, $keys, $config["per_page"], $pageNumber);            $bodyData['contractors'] = $this->carriageContractors_model->carriageContractors();            $bodyData['products'] = $this->routes_model->products();            $bodyData['cities'] = $this->routes_model->cities();            $bodyData['companies'] = $this->companies_model->companies();            $bodyData['tankers'] = $this->tankers_model->tankers();            if(isset($_GET['print'])){                if(isset($_POST['check'])){                    $bodyData['accounts'] = $this->helper_model->filter_records($bodyData['accounts'], $_POST['check'],"trip_id");                }                if(isset($_POST['column'])){                    $bodyData['columns'] = $_POST['column'];                }                $this->load->view('companies/components/print_accounts', $bodyData);            }else{                $this->load->view('components/header', $headerData);                $this->load->view('companies/accounts', $bodyData);                $this->load->view('components/footer');            }        }    }    public function company_mass_payment($trip_ids)    {        $trip_ids_str = $trip_ids;        $trip_ids = explode('_',$trip_ids_str);        $bodyData = array(            'trips'=>$this->trips_model->test_trips_details($trip_ids),            'trip_ids_str'=>$trip_ids_str,        );        $this->load->view('companies/components/company_mass_payment', $bodyData);    }    public function add_company_payment($trip_detail_id, $company_id, $actual_commission, $remaining){        $bodyData = array(            'previous_payments' => $this->accounts_model->company_payments($trip_detail_id, $company_id),            'form_id'=>($this->helper_model->last_id('company_accounts')+1),            'trip_detail_id'=>$trip_detail_id,            'company_id'=>$company_id,            'actual_commission'=>$actual_commission,            'remaining'=>$remaining,        );        $this->load->view('companies/components/add_company_payment', $bodyData);    }    public function add_payment($trip_id, $company_id){        $bodyData = array(            'previous_payments' => $this->accounts_model->company_payments($trip_id, $company_id),            'form_id'=>($this->helper_model->last_id('company_accounts')+1),            'trip_id'=>$trip_id,            'company_id'=>$company_id,        );        $this->load->view('companies/components/add_payment', $bodyData);    }    public function show_payments($agent, $trip_detail_id, $agent_id){        $payments = array();        if($agent == 'contractor'){            //$payments = $this->accounts_model->contractor_payments($trip_id, $agent_id);        }else if($agent == 'customer'){            $payments = $this->accounts_model->customer_payments($trip_detail_id, $agent_id);        }        $bodyData = array(            'previous_payments' => $payments,            'form_id'=>($this->helper_model->last_id('customer_accounts')+1),            'trip_detail_id'=>$trip_detail_id,            'agent'=>$agent,        );        $this->load->view('companies/components/show_payments', $bodyData);    }    public function contact($c_id = '', $req ='' )    {        if($c_id == ''){            $this->index();        }else{            $headerData = array(                'title' => 'Virik-Logistics | Carriage | Contact',                'page' => 'companies',            );            $bodyData = array(                'contact' => $this->companies_model->company($c_id),            );            $this->load->view('components/header', $headerData);    //HEADER DATA            //check if we some data received of not against the request?            if($bodyData['contact'] != ''){                $this->load->view('companies/contact', $bodyData);            }else{                $this->load->view('components/recordNotFound');            }            $this->load->view('components/footer');     //footer data        }    }    public function home()    {    }    function _validate_company_payment_amount($amount){        $previous_payments = $this->accounts_model->company_payments($this->input->post('trip_detail_id'), $this->input->post('company_id'));        $paid = 0;        foreach($previous_payments as $payment){            $paid+= $payment->amount;        }        if($amount > $this->input->post('actual_commission')-$paid){            $this->form_validation->set_message('_validate_company_payment_amount','Entry failed because of Invalid Commission Amount. Please try again.');            return false;        }        return true;    }    function _validate_company_deleting($company_id){        $used_in = '';        $trips = $this->db->get_where('trips',array('company_id'=>$company_id, 'active'=>1))->num_rows();        if($trips >=1){            $used_in = 'Trips ';        }        if($used_in != ''){            $this->form_validation->set_message('_validate_company_deleting','This Company is being used in the other parts of the system! e.g('.$used_in.').');            return false;        }        return true;    }    function _create_captcha(){        /*$words = array( '2', '3', '4', '5', '6','7', '8', '9','0', 'a', 'b','z', 'n', 'b','x', 'y', 'v');        $count = 1;        $word = "";        while($count < 3){            $word = $word.$words[mt_rand(0, 16)];            $count++;        }        $vals = array(            'word'      => strtolower($word),            'img_path'	=> './captcha/',            'img_url'	=> base_url().'captcha/',            'font_path'	=> 'fonts/DENMARK.ttf',            'img_width'	=> '210',            'img_height' => 40,            'expiration' => 20        );        $cap = create_captcha($vals);        return $cap;*/    }    function _check_credentials($str, $data){        /*list($table, $userField, $passField)=explode('.', $data);        //You have to change this line below        if($this->input->post('username') != "" && $this->input->post('password') != "" && $this->input->post('confirmCaptcha') != "" && $this->form_validation->captcha_check($this->input->post('confirmCaptcha'), 'captcha') == true){            //////////////////////////////////////////////////////////////////////////////////////////////////            $userName = $userField.".".$this->input->post('username');            $password = $passField.".".$this->input->post('password');            $credentials = $this->admin_model->check_credentials($table, $userName, $password);            if($credentials == false){                $this->form_validation->set_message('_check_credentials','Invalid Username/Password. Please try again');                return false;            }else{                return true;            }        }else{            return true;        }*/    }}/* End of file welcome.php *//* Location: ./application/controllers/welcome.php */