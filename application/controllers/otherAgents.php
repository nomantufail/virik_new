<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');include_once(APPPATH."controllers/parentController.php");class OtherAgents extends ParentController {    //public variables...    public function __construct()    {        parent::__construct();    }    /* The default function that gets called when visiting the page */    public function index($section='')    {        if($this->login == true){            $name = (isset($_GET['name']))?$_GET['name']:'';            $idCard = (isset($_GET['idCard']))?$_GET['idCard']:'';            $keys = array(                'name'=>$name,                'idCard'=>$idCard,            );            //defining the sorting column            $sort = array(                'sort_by'=>(isset($_GET['sort_by']))?$_GET['sort_by']:'entryDate',                'order' => (isset($_GET['order']))?$_GET['order']:'asc',            );            ///////////////////////////////////////////////////////////////            //counting total agents            $num_other_agents = $this->otherAgents_model->count_searched_otherAgents($keys);            $num_other_agents = ($num_other_agents == 0)?1:$num_other_agents;            $config = $this->helper_model->pagination_configs("otherAgents/index/?", "other_agents", $num_other_agents);            $this->pagination->initialize($config);            $pageNumber = 0;            if(isset($_GET['page'])){                $pageNumber = $_GET['page'];                if($pageNumber>=0){$pageNumber = $pageNumber;}else{ $pageNumber = 0;}            }            $headerData = array(                'title' => 'Virik-Logistics | Other Agents',                'page' => 'otherAgents',            );            $bodyData = array(                'otherAgents' => '',                'section' => '',                'someMessage' => '',                'pages' => $this->pagination->create_links(),                'columns' => array(),            );            if($section == '' || $section == 'all'){$bodyData['section'] = 'all';}else if($section== 'add'){ $bodyData['section'] = 'add';}            //deleting the customer*****************//            if(isset($_GET['del'])){                $_POST['del'] = $_GET['del'];                $this->form_validation->set_rules('del', 'Delete Other Agent', 'required|numeric|callback__validate_otherAgent_deleting');                if ($this->form_validation->run() == true)                {                    if( $this->helper_model->delete_record('other_agents',$_GET['del']) == true){                        $bodyData['someMessage'] = array('message'=>'Other Agent Deleted Successfully!', 'type'=>'alert-success');                    }else{                        $bodyData['someMessage'] = array('message'=>'Some Unknown database fault happened. please try again a few moments later. Or you can contact your system provider.<br>Thank You', 'type'=>'alert-warning');                    }                }            }            //////////////////////////////////////////////////////////            if(isset($_POST['addOtherAgent'])){                if($this->form_validation->run('add_otherAgents') == true){                    if( $this->otherAgents_model->add_otherAgent() == true){                        $bodyData['someMessage'] = array('message'=>'Agent Added Successfully!', 'type'=>'alert-success');                    }else{                        $bodyData['someMessage'] = array('message'=>'Some Unknown database fault happened. please try again a few moments later. Or you can contact your system provider.<br>Thank You', 'type'=>'alert-warning');                    }                }            }            $bodyData['otherAgents'] = $this->otherAgents_model->search_limited_otherAgents($config["per_page"], $pageNumber, $keys, $sort);            //$bodyData['otherAgents'] = $this->otherAgents_model->otherAgents();            if(isset($_GET['print'])){                if(isset($_POST['check'])){                    $bodyData['customers'] = $this->helper_model->filter_records($bodyData['otherAgents'], $_POST['check'],"id");                }                if(isset($_POST['column'])){                    $bodyData['columns'] = $_POST['column'];                }                $this->load->view('otherAgents/components/print_otherAgents', $bodyData);            }else{                $this->load->view('components/header', $headerData);                $this->load->view('otherAgents/welcome', $bodyData);                $this->load->view('components/footer');            }        }else{            $this->load->view('admin/login');        }    }    public function profile($c_id = '', $req ='' )    {        if($c_id == ''){            $this->index();        }else{            $headerData = array(                'title' => 'Virik-Logistics | Customers | Profile',                'page' => 'customers',            );            $bodyData = array('profile' => $this->customers_model->customer($c_id),);            $footerData = array(                'link'=>'?customer_id='.$c_id,            );            $this->load->view('components/header', $headerData);    //HEADER DATA            //check if we some data received of not against the request?            if($bodyData['profile'] != ''){                $this->load->view('customers/profile', $bodyData);            }else{                $this->load->view('components/recordNotFound');            }            $this->load->view('components/footer', $footerData);     //footer data        }    }    public function accounts($c_id = '', $month ='' )    {        if($c_id == ''){            $this->index();        }else{            $headerData = array(                'title' => 'Virik-Logistics | Customers | Accounts',                'page' => 'customers',            );            if($month == ''){$month = date('Y-m');}            $bodyData = array(                'profile' => $this->customers_model->customer($c_id),                'accounts' => '',                'section' => '',                'someMessage' => '',                'form_id'=>'',                'month' => $month,                'columns' => array(),            );            $footerData = array(                'link'=>'?customer_id='.$c_id,            );            if($this->form_validation->run('add_customer_payment') == true){                if( $this->accounts_model->add_customer_payment() == true){                    $bodyData['someMessage'] = array('message'=>'Payment Added Successfully!', 'type'=>'alert-success');                }else{                    $bodyData['someMessage'] = array('message'=>'Some Unknown database fault happened. please try again a few moments later. Or you can contact your system provider.<br>Thank You', 'type'=>'alert-warning');                }            }            $bodyData['accounts'] = $this->accounts_model->customer($c_id, $month);            //calculating unique form id to prevent from re submission            $bodyData['form_id'] = ($this->helper_model->last_id('customer_accounts')+1);            if(isset($_GET['print'])){                if(isset($_POST['check'])){                    $bodyData['accounts'] = $this->helper_model->filter_records($bodyData['accounts'], $_POST['check'],"trip_id");                }                if(isset($_POST['column'])){                    $bodyData['columns'] = $_POST['column'];                }                $this->load->view('customers/components/print_accounts', $bodyData);            }else{                $this->load->view('components/header', $headerData);                $this->load->view('customers/accounts', $bodyData);                $this->load->view('components/footer', $footerData);            }        }    }    public function profit_loss($c_id = '', $from_date='', $to_date='' )    {        if($c_id == ''){            $this->index();        }else{            $headerData = array(                'title' => 'Virik-Logistics | Customers | profit & Loss',                'page' => 'customers',            );            $bodyData = array(                'profile' => $this->customers_model->customer($c_id),                'trips_expenses' => '',                'other_tanker_expenses' => '',                'revenues' => '',                'remaining' => 0,                'paid' => 0,                'total_tanker_expense_trips' => 0,                'total_tanker_expense_other' => 0,                'total_driver_expense_trips' => 0,                'total_pd_expense_trips' => 0,                'total_revenue' => 0,                'total_freight'=> 0,                'from_date' => '',                'to_date' => '',            );            $from = $from_date;            $to = $to_date;            if($from == '' || $to == ''){                $from = date('Y-m')."-01";                $to = date('Y-m')."-".date('t');            }else{                if($this->helper_model->bigger_date(easyDate($from),easyDate($to))){                    $temp_to = $to;                    $to = $from;                    $from = $temp_to;                }                //converting date formats                $to = easyDate($to);                $from = easyDate($from);            }            //computing bodyData            $bodyData['trips_expenses'] = $this->profit_loss_model->customer_trips_expenses($c_id, $from, $to);            foreach($bodyData['trips_expenses'] as $expense){                $bodyData['total_tanker_expense_trips'] += $expense->tanker_expense;                $bodyData['total_driver_expense_trips'] += $expense->drivers_expense;                $bodyData['total_pd_expense_trips'] += $expense->pd_expense;            }            $bodyData['other_tanker_expenses'] = $this->profit_loss_model->customer_other_tanker_expenses($c_id, $from, $to);            foreach($bodyData['other_tanker_expenses'] as $expense){                $bodyData['total_tanker_expense_other'] += $expense->amount;            }            $bodyData['revenues'] = $this->profit_loss_model->customer_trips_revenues($c_id, $from, $to);            foreach($bodyData['revenues'] as $revenue){                $bodyData['total_freight'] += $revenue->total_freight;                $bodyData['total_revenue'] += $revenue->net_freight;                $bodyData['paid'] += $revenue->paid;                $bodyData['remaining'] += $revenue->remaining;            }            $bodyData['from_date']=$from;            $bodyData['to_date']=$to;            if(isset($_GET['print'])){                $this->load->view('customers/components/print_profit_loss', $bodyData);            }else{                $this->load->view('components/header', $headerData);                $this->load->view('customers/profit_loss', $bodyData);                $this->load->view('components/footer');            }        }    }    public function contact($c_id = '', $req ='' )    {        if($c_id == ''){            $this->index();        }else{            $headerData = array(                'title' => 'Virik-Logistics | Customers | Accounts',                'page' => 'customers',            );            $bodyData = array(                'contacts' => $this->accounts_model->customer($c_id),            );            $this->load->view('components/header', $headerData);    //HEADER DATA            //check if we some data received of not against the request?            if($bodyData['contacts'] != ''){                $this->load->view('customers/contact', $bodyData);            }else{                $this->load->view('components/recordNotFound');            }            $this->load->view('components/footer');     //footer data        }    }    function _create_captcha(){        /*$words = array( '2', '3', '4', '5', '6','7', '8', '9','0', 'a', 'b','z', 'n', 'b','x', 'y', 'v');        $count = 1;        $word = "";        while($count < 3){            $word = $word.$words[mt_rand(0, 16)];            $count++;        }        $vals = array(            'word'      => strtolower($word),            'img_path'	=> './captcha/',            'img_url'	=> base_url().'captcha/',            'font_path'	=> 'fonts/DENMARK.ttf',            'img_width'	=> '210',            'img_height' => 40,            'expiration' => 20        );        $cap = create_captcha($vals);        return $cap;*/    }    function _validate_otherAgent_deleting($agent_id){        $used_in = '';        $this->db->from('voucher_journal');        $this->db->join('voucher_entry','voucher_entry.journal_voucher_id = voucher_journal.id','left');        $where = "(voucher_entry.related_other_agent = ".$agent_id.")";        $this->db->where($where);        $this->db->where('voucher_journal.active',1);        $accounts = $this->db->get()->num_rows();        if($accounts >= 1){            $used_in .= 'Accounts';        }        if($used_in != ''){            $this->form_validation->set_message('_validate_otherAgent_deleting','This Agent is being used in the other parts of the system! e.g('.$used_in.').');            return false;        }        return true;    }    function _check_credentials($str, $data){        /*list($table, $userField, $passField)=explode('.', $data);        //You have to change this line below        if($this->input->post('username') != "" && $this->input->post('password') != "" && $this->input->post('confirmCaptcha') != "" && $this->form_validation->captcha_check($this->input->post('confirmCaptcha'), 'captcha') == true){            //////////////////////////////////////////////////////////////////////////////////////////////////            $userName = $userField.".".$this->input->post('username');            $password = $passField.".".$this->input->post('password');            $credentials = $this->admin_model->check_credentials($table, $userName, $password);            if($credentials == false){                $this->form_validation->set_message('_check_credentials','Invalid Username/Password. Please try again');                return false;            }else{                return true;            }        }else{            return true;        }*/    }    function _check_re_submission($form_id, $table){        if($this->helper_model->re_submission($table, $form_id) == true){            $this->form_validation->set_message('_check_re_submission','Entry failed because of form re-submission.');            return false;        }        return true;    }}/* End of file welcome.php *//* Location: ./application/controllers/welcome.php */