<?phpclass Tankers_model extends CI_Model {    public function __construct(){        parent::__construct();    }    public function tankers($customer_id=''){        include_once(APPPATH."models/helperClasses/Tanker_Details.php");        $incomplete_trips = group_objects_by($this->trips_model->trips_for_tankers_on_move(array('stn_number ='=>'')), 'tanker_id');        $customers = group_objects_by($this->customers_model->customers(), 'id');        $tankers_data = array();        if($customer_id == ''){            $this->db->order_by("truck_number", "desc");            $tankers = $this->db->get('tankers')->result();            foreach($tankers as $tanker){                array_unshift($tankers_data, new Tanker_Details($tanker, $customers, $incomplete_trips));            }            $tankers = $tankers_data;        }else{            $this->db->order_by("truck_number", "desc");            $tankers = $this->db->get_where('tankers', array('customerId'=> $customer_id))->result();            foreach($tankers as $tanker){                array_unshift($tankers_data, new Tanker_Details($tanker, $customers, $incomplete_trips));            }            $tankers = $tankers_data;        }        return $tankers;    }    public function limited_tankers($customer_id,$limit, $start){        include_once(APPPATH."models/helperClasses/Tanker_Details.php");        $tankers_data = array();        if($customer_id == ''){            $this->db->order_by("customerId", "desc");            $this->db->limit($limit, $start);            $tankers = $this->db->get('tankers')->result();            foreach($tankers as $tanker){                array_unshift($tankers_data, new Tanker_Details($tanker));            }            $tankers = $tankers_data;        }else{            $this->db->order_by("entryDate", "desc");            $this->db->limit($limit, $start);            $this->db->where('customerId',$customer_id);            $tankers = $this->db->get("tankers")->result();            foreach($tankers as $tanker){                array_unshift($tankers_data, new Tanker_Details($tanker));            }            $tankers = $tankers_data;        }        return $tankers;    }    public function search_limited_tankers($limit, $start, $where = ""){        $sorting_info = Sort::columns('tankers');        $this->db->select('*');        $this->db->from('tankers_status_view');        $this->helper_model->search("Tankers_Search_Form","tankers");        if($where != "")            $this->db->where($where);        $this->helper_model->sort($sorting_info);        $this->db->limit($limit, $start);        $result = $this->db->get()->result();        return $result;    }    public function count_searched_tankers($where = ""){        $this->db->select('*');        $this->db->from('tankers_status_view');        $this->helper_model->search("Tankers_Search_Form","tankers");        if($where != "")            $this->db->where($where);        $result = $this->db->get()->num_rows();        return $result;    }    public function tanker($id){        include_once(APPPATH."models/helperClasses/Tanker_Details.php");        $result = $this->db->get_where('tankers',array('id'=>$id))->result();        if($result){            $tanker = new Tanker_Details($result[0]);            return $tanker;        }else{            return null;        }    }    public function tankers_by_ids($ids){        if($ids == '')        {            return null;        }        include_once(APPPATH."models/helperClasses/Tanker_Details.php");        $this->db->where_in('tankers.id',$ids);        $result = $this->db->get('tankers')->result();        $tankers = array();        if(sizeof($result) >0){            foreach($result as $record)            {                $tanker = new Tanker_Details($record);                array_push($tankers, $tanker);            }        }        return $tankers;    }    public function trips($tanker_id, $month){        $this->db->select('id');        $this->db->where(array(            'tanker_id'=>$tanker_id,            'entryDate >=' =>$this->helper_model->first_day_of_month(date('Y-m-d')),            'entryDate <=' => $this->helper_model->last_day_of_month(date('Y-m-d')),        ));        $this->db->where('trips.active',1);        $trips = $this->db->get('trips')->result();        $final_trips = array();        foreach($trips as $trip){            array_unshift($final_trips, $this->trips_model->trip_details($trip->id));        }        return $final_trips;    }    public function search_limited_trips($tanker_id, $keys, $limit, $start, $sort){        if($keys['from'] != ''){            $this->db->where('trips.entryDate >=', $keys['from']);        }        if($keys['to'] != ''){            $this->db->where('trips.entryDate <=', $keys['to']);        }        if($keys['id'] != ''){            $this->db->where('trips.id',$keys['id']);        }        if($keys['entryDate'] != ''){            $this->db->where('trips.entryDate',$keys['entryDate']);        }        if($keys['contractor'] != ''){            $this->db->like('carriage_contractors.name',$keys['contractor']);        }        if($keys['customer'] != ''){            $this->db->like('customers.name',$keys['customer']);        }        if($keys['company'] != ''){            $this->db->like('companies.name',$keys['company']);        }        if($keys['source'] != ''){            $this->db->like('source_cities.cityName',$keys['source']);        }        if($keys['destination'] != ''){            $this->db->like('destination_cities.cityName',$keys['destination']);        }        $this->db->select('trips.id as trip_id');        $this->db->distinct();        $this->db->limit($limit, $start);        if($sort['sort_by'] == 'route'){            $this->db->order_by('source_cities.cityName', $sort['order']);            $this->db->order_by('destination_cities.cityName', $sort['order']);        }else{            $this->db->order_by($sort['sort_by'], $sort['order']);        }        $this->db->from('trips');        $this->db->where('trips.active',1);        $this->db->where('trips.tanker_id', $tanker_id);        $this->db->join('trips_details', 'trips_details.trip_id = trips.id');        $this->db->join('customers', 'customers.id = trips.customer_id');        $this->db->join('carriage_contractors', 'carriage_contractors.id = trips.contractor_id');        $this->db->join('companies', 'companies.id = trips.company_id');        $this->db->join('tankers', 'tankers.id = trips.tanker_id');        $this->db->join('cities as source_cities', 'source_cities.id = trips_details.source');        $this->db->join('cities as destination_cities', 'destination_cities.id = trips_details.destination');        $trips = $this->db->get()->result();        $trips_details = array();        foreach($trips as $trip){            array_push($trips_details, $this->trips_model->trip_details($trip->trip_id));        }        return $trips_details;    }    public function count_searched_trips($tanker_id, $keys){        if($keys['from'] != ''){            $this->db->where('trips.entryDate >=', $keys['from']);        }        if($keys['to'] != ''){            $this->db->where('trips.entryDate <=', $keys['to']);        }        if($keys['id'] != ''){            $this->db->where('trips.id',$keys['id']);        }        if($keys['entryDate'] != ''){            $this->db->where('trips.entryDate',$keys['entryDate']);        }        if($keys['contractor'] != ''){            $this->db->like('carriage_contractors.name',$keys['contractor']);        }        if($keys['customer'] != ''){            $this->db->like('customers.name',$keys['customer']);        }        if($keys['company'] != ''){            $this->db->like('companies.name',$keys['company']);        }        if($keys['source'] != ''){            $this->db->like('source_cities.cityName',$keys['source']);        }        if($keys['destination'] != ''){            $this->db->like('destination_cities.cityName',$keys['destination']);        }        $this->db->select('trips.id as trip_id');        $this->db->distinct();        $this->db->from('trips');        $this->db->where('trips.active',1);        $this->db->where('trips.tanker_id', $tanker_id);        $this->db->join('trips_details', 'trips_details.trip_id = trips.id');        $this->db->join('customers', 'customers.id = trips.customer_id');        $this->db->join('carriage_contractors', 'carriage_contractors.id = trips.contractor_id');        $this->db->join('companies', 'companies.id = trips.company_id');        $this->db->join('tankers', 'tankers.id = trips.tanker_id');        $this->db->join('cities as source_cities', 'source_cities.id = trips_details.source');        $this->db->join('cities as destination_cities', 'destination_cities.id = trips_details.destination');        $trips = $this->db->get()->result();        return sizeof($trips);    }    public function trips_expenses($tanker_id){        $expenses = array();        $this->db->order_by("entryDate", "desc");        $this->db->where('trips.active',1);        $tanker_trips = $this->db->get_where('trips', array('tanker_id'=>$tanker_id))->result();        foreach($tanker_trips as $tanker_trip){            $this->db->order_by("entryDate", "asc");            $trip_tanker_expenses = $this->db->get_where('trips_tankers_expenses', array('tanker_id'=>$tanker_id, 'trip_id'=>$tanker_trip->id))->result();            foreach($trip_tanker_expenses as $trip_tanker_expense){                array_unshift($expenses, $trip_tanker_expense);            }        }        return $expenses;    }    public function trips_expenses_by_month($tanker_id, $month){        include_once(APPPATH."models/helperClasses/Trip_Tanker_Expense_Details.php");        $this->db->select('id');        $this->db->like('entryDate', $month."-", 'after');        $this->db->where(array(            'tanker_id'=>$tanker_id,        ));        $this->db->where('trips.active',1);        $tanker_trips = $this->db->get('trips')->result();        $expenses = array();        foreach($tanker_trips as $tanker_trip){            $this->db->order_by("entryDate", "asc");            $trip_tanker_expenses = $this->db->get_where('trips_tankers_expenses', array('tanker_id'=>$tanker_id, 'trip_id'=>$tanker_trip->id))->result();            foreach($trip_tanker_expenses as $trip_tanker_expense){                array_unshift($expenses, new Trip_Tanker_Expense_Details($trip_tanker_expense));            }        }        return $expenses;    }    //in case when trip id and tanker_id both are given    public function given_trip_tanker_expenses($tanker_id, $trip_id){        $expenses = array();        $this->db->order_by("entryDate", "asc");        $this->db->where(array(            'tanker_id'=>$tanker_id,            'trip_id'=>$trip_id,        ));        $trip_tanker_expenses = $this->db->get('trips_tankers_expenses')->result();        foreach($trip_tanker_expenses as $trip_tanker_expense){            array_unshift($expenses, $trip_tanker_expense);        }        return $expenses;    }    public function add_trip_expense($tanker_id){        $amount = $this->input->post('amount');        $expense_date = $this->input->post('expense_date');        $title = $this->input->post('expense_title');        $trip_id = $this->input->post('trip_id');        $tanker_id = $tanker_id;        $data = array(            'tanker_id'=>$tanker_id,            'trip_id'=>$trip_id,            'expense_date'=>$expense_date,            'description'=>$title,            'amount'=>$amount,            'entryDate'=>$this->carbon->now(new DateTimeZone('Asia/Karachi'))->toDateTimeString(),        );        $result = $this->db->insert('trips_tankers_expenses', $data);        return ($result == 1)?true : false;    }    public function add_other_expense($tanker_id){        $expense_date = easyDate($this->input->post('expense_date'));        $amount = $this->input->post('amount');        $title = $this->input->post('expense_title');        $tanker_id = $tanker_id;        $data = array(            'tanker_id'=>$tanker_id,            'expense_date'=>$expense_date,            'description'=>$title,            'amount'=>$amount,            'entryDate'=>$this->carbon->now(new DateTimeZone('Asia/Karachi'))->toDateTimeString(),        );        $result = $this->db->insert('other_tankers_expenses', $data);        return ($result == 1)?true : false;    }    public function other_expenses($tanker_id){        $this->db->order_by("entryDate", "desc");        $result = $this->db->get_where('other_tankers_expenses', array('tanker_id'=>$tanker_id))->result();        return $result;    }    public function other_expenses_by_month($tanker_id, $month){        $this->db->order_by('expense_date', 'asc');        $this->db->like('expense_date', $month."-", 'after');        $this->db->where(array(            'tanker_id'=>$tanker_id,        ));        $other_expenses = $this->db->get('other_tankers_expenses')->result();        return $other_expenses;    }    public function add_tanker($c_id=''){        $customerId = "";        if($c_id == ''){            $customerId = $this->input->post('customer');        }else{            $customerId = $c_id;        }        $data = array(            'customerId'=>$customerId,            'truck_number'=>$this->input->post('tanker_number'),            'engine_number'=>$this->input->post('engine_number'),            'chase_number'=>$this->input->post('chase_number'),            'fitness_certificate'=>$this->input->post('fitness_certificate'),            'capacity'=>$this->input->post('capacity'),            'entryDate' => $this->carbon->now(new DateTimeZone('Asia/Karachi'))->toDateTimeString(),        );        $result = $this->db->insert('tankers', $data);        if($result == true){            return true;        }else{            return false;        }    }    public function save_tanker(){        $capacity = $this->input->post('capacity');        $tanker_id = $this->input->post('tanker_id');        $data = array(            'capacity'=>$capacity,        );        $this->db->where('id', $tanker_id);        $result = $this->db->update('tankers', $data);        if($result == true){            return true;        }else{            return false;        }    }    public function fetch_basic_tankers_info_by_ids($tankerIds)    {        $this->db->select('*');        $this->db->where_in('id', $tankerIds);        $result = $this->db->get('tankers')->result();        return $result;    }    public function fetch_basic_tankers_info()    {        $this->db->select('*');        $result = $this->db->get('tankers')->result();        return $result;    }}