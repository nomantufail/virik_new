<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');include_once(APPPATH."controllers/parentController.php");class Tankers extends ParentController {    //public variables...    public function __construct()    {        parent::__construct();    }    /* The default function that gets called when visiting the page */    public function index($section='')    {        $id = (isset($_GET['tanker']))?$_GET['tanker']:'';        $chase_number = (isset($_GET['chase']))?$_GET['chase']:'';        $engine_number = (isset($_GET['engine']))?$_GET['engine']:'';        $capacity = (isset($_GET['capacity']))?$_GET['capacity']:'';        $fitness_certificate = (isset($_GET['certificate']))?$_GET['certificate']:'';        $status = (isset($_GET['status']))?$_GET['status']:'';        $customer = (isset($_GET['customer']))?$_GET['customer']:'';        $trip_id = (isset($_GET['trip_id']))?$_GET['trip_id']:'';        $trip_date = (isset($_GET['trip_date']))?$_GET['trip_date']:'';        $product = (isset($_GET['product']))?$_GET['product']:'';        //defining the sorting column        $sort = array(            'sort_by'=>(isset($_GET['sort_by']))?$_GET['sort_by']:'tankers_status_view.id',            'order' => (isset($_GET['order']))?$_GET['order']:'asc',        );        ///////////////////////////////////////////////////////////////        $total_rows = $this->tankers_model->count_searched_tankers();        $total_rows = ($total_rows == 0)?1:$total_rows;        //********Calculating Records/Page***********//        if(isset($_GET['pagination']) && $_GET['pagination'] == 'false'){            $per_page = $total_rows;        }else{            $per_page = 'false';        }        if(isset($_GET['print'])){            $per_page = $total_rows;        }        //computing the url for page number        $query_string = explode('&page',$_SERVER['QUERY_STRING']);        $query_string = $query_string[0];        //////////////////////////////////        //counting total agents        $config = $this->helper_model->pagination_configs("tankers/index/?".$query_string, "tankers",$total_rows, $per_page);        $this->pagination->initialize($config);        $pageNumber = 0;        if(isset($_GET['page'])){            $pageNumber = $_GET['page'];            if($pageNumber>=0){$pageNumber = $pageNumber;}else{ $pageNumber = 0;}        }        $headerData = array(            'title' => 'Virik-Logistics | Tankers',            'page' => 'tankers',        );        $bodyData = array(            'all_tankers' =>$this->db->get('tankers')->result(),            'products' => $this->products_model->get(),            'tankers' => '',            'customers' => $this->customers_model->customers(),            'cities'=>$this->routes_model->cities(),            'section' => '',            'someMessage' => '',            'pages' => $this->pagination->create_links(),            'columns' => array(),        );        if($section == '' || $section == 'all'){$bodyData['section'] = 'all';}else if($section== 'add'){ $bodyData['section'] = 'add';}        //deleting the Tanker*****************//        if(isset($_GET['del'])){            $_POST['del'] = $_GET['del'];            $this->form_validation->set_rules('del', 'Tanker', 'required|numeric|callback__validate_tanker_deleting');            if ($this->form_validation->run() == true)            {                if( $this->helper_model->delete_record('tankers',$_GET['del']) == true){                    $bodyData['someMessage'] = array('message'=>'Tanker Deleted Successfully!', 'type'=>'alert-success');                }else{                    $bodyData['someMessage'] = array('message'=>'Some Unknown database fault happened. please try again a few moments later. Or you can contact your system provider.<br>Thank You', 'type'=>'alert-warning');                }            }        }        //////////////////////////////////////////////////////////        if(isset($_POST['addTanker'])){            if($this->form_validation->run('add_customer_tanker') == true){                if( $this->tankers_model->add_tanker() == true){                    $bodyData['someMessage'] = array('message'=>'Tanker Added Successfully!', 'type'=>'alert-success');                }else{                    $bodyData['someMessage'] = array('message'=>'Some Unknown database fault happened. please try again a few moments later. Or you can contact your system provider.<br>Thank You', 'type'=>'alert-warning');                }            }        }        if(isset($_POST['save_tanker'])){            if($this->form_validation->run('edit_tanker') == true){                if( $this->tankers_model->save_tanker() == true){                    $bodyData['someMessage'] = array('message'=>'Tanker Saved Successfully!', 'type'=>'alert-success');                }else{                    $bodyData['someMessage'] = array('message'=>'Some Unknown database fault happened. please try again a few moments later. Or you can contact your system provider.<br>Thank You', 'type'=>'alert-warning');                }            }        }        $bodyData['tankers'] = $this->tankers_model->search_limited_tankers($config["per_page"], $pageNumber);        if(isset($_GET['print'])){            if(isset($_POST['check'])){                $bodyData['tankers'] = $this->helper_model->filter_records($bodyData['tankers'], $_POST['check'],"id");            }            if(isset($_POST['column'])){                $bodyData['columns'] = $_POST['column'];            }            $this->load->view('tankers/components/print_tankers', $bodyData);        }else{            $this->load->view('components/header', $headerData);            $this->load->view('tankers/welcome', $bodyData);            $this->load->view('components/footer');        }    }    public function edit_tanker($tanker_id){        $bodyData = array(            'tanker' => $this->tankers_model->tanker($tanker_id),            'form_id'=>($this->helper_model->last_id('customer_accounts')+1),            'tanker_id'=>$tanker_id,        );        $this->load->view('tankers/components/edit_tanker', $bodyData);    }    public function profile($tanker_id = '', $req ='' )    {        if($tanker_id == ''){            $this->index();        }else{            $headerData = array(                'title' => 'Virik-Logistics | Tankers | Profile',                'page' => 'tankers',            );            $bodyData = array(                'profile' => $this->tankers_model->tanker($tanker_id),                'customers'=>$this->customers_model->customers(),                'someMessage'=>'',            );            //saving the voucher                if(isset($_POST['save_tanker_expense_voucher'])){                $this->form_validation->set_rules('form_id', 'Form Re-Submission', 'required|numeric|callback__check_re_submission[voucher_journal]');                if($this->form_validation->run() == true){                    if( $this->accounts_model->save_tanker_expense_voucher() == true){                        $bodyData['someMessage'] = array('message'=>'Voucher Saved Successfully!', 'type'=>'alert-success');                    }else{                        $bodyData['someMessage'] = array('message'=>'Some Unknown database fault happened. please try again a few moments later. Or you can contact your system provider.<br>Thank You', 'type'=>'alert-warning');                    }                }            }////////////////////////////////////////////////////////            $bodyData['tankers'] = $this->tankers_model->tankers();            $footerData = array(                'link'=>'?customer_id='.$bodyData['profile']->customerId.'&tanker_id='.$tanker_id,            );            $this->load->view('components/header', $headerData);    //HEADER DATA            $this->load->view('tankers/profile', $bodyData);            $this->load->view('components/footer', $footerData);     //footer data        }    }    public function trips($tanker_id, $month =''){        $keys['from'] = (isset($_GET['from']))?$_GET['from']:'';        $keys['to'] = (isset($_GET['to']))?$_GET['to']:'';        $keys['id'] = (isset($_GET['id']))?$_GET['id']:'';        $keys['entryDate'] = (isset($_GET['entryDate']))?$_GET['entryDate']:'';        $keys['contractor'] = (isset($_GET['contractor']))?$_GET['contractor']:'';        $keys['customer'] = (isset($_GET['customer']))?$_GET['customer']:'';        $keys['company'] = (isset($_GET['company']))?$_GET['company']:'';        $keys['source'] = (isset($_GET['source']))?$_GET['source']:'';        $keys['destination'] = (isset($_GET['destination']))?$_GET['destination']:'';        ///////////////////////////////////////////////////////////////        //defining the sorting column        $sort = array(            'sort_by'=>(isset($_GET['sort_by']))?$_GET['sort_by']:'trips.id',            'order' => (isset($_GET['order']))?$_GET['order']:'desc',        );        ///////////////////////////////////////////////////////////////        $total_rows = $this->tankers_model->count_searched_trips($tanker_id, $keys);        $total_rows = ($total_rows == 0)?1:$total_rows;        /////////////////        //computing the url for page number        $query_string = explode('&page',$_SERVER['QUERY_STRING']);        $query_string = $query_string[0];        //////////////////////////////////        $config = $this->helper_model->pagination_configs("tankers/trips/$tanker_id/?".$query_string, "trips", $total_rows);        $this->pagination->initialize($config);        $pageNumber = 0;        if(isset($_GET['page'])){            $pageNumber = $_GET['page'];            if($pageNumber>=0){$pageNumber = $pageNumber;}else{ $pageNumber = 0;}        }        //////////////////////////////////////////////////////////////////////////////////        $headerData = array(            'title' => 'Virik-Logistics | Tankers | Trips',            'page' => 'tankers'        );        if($month == ''){$month = date('Y-m');}        $bodyData = array(            'trips' => '',            'profile' => $this->tankers_model->tanker($tanker_id),            'form_id'=>'',            'someMessage'=>'',            'any_error'=>false,            'month'=>$month,            'columns'=>array(),        );        //saving the voucher        if(isset($_POST['save_tanker_expense_voucher'])){            $this->form_validation->set_rules('form_id', 'Form Re-Submission', 'required|numeric|callback__check_re_submission[voucher_journal]');            if($this->form_validation->run() == true){                if( $this->accounts_model->save_tanker_expense_voucher() == true){                    $bodyData['someMessage'] = array('message'=>'Voucher Saved Successfully!', 'type'=>'alert-success');                }else{                    $bodyData['someMessage'] = array('message'=>'Some Unknown database fault happened. please try again a few moments later. Or you can contact your system provider.<br>Thank You', 'type'=>'alert-warning');                }            }        }////////////////////////////////////////////////////////        $bodyData['trips'] = $this->tankers_model->search_limited_trips($tanker_id, $keys, $config["per_page"], $pageNumber, $sort);        //calculating unique form id to prevent from re submission        $bodyData['form_id'] = ($this->helper_model->last_id('trips_tankers_expenses')+1);        $bodyData['tankers'] = $this->tankers_model->tankers();        if(isset($_GET['print'])){            if(isset($_POST['check'])){                $bodyData['trips'] = $this->helper_model->filter_records($bodyData['trips'], $_POST['check'],"trip_id");            }            if(isset($_POST['column'])){                $bodyData['columns'] = $_POST['column'];            }            $this->load->view('tankers/components/print_trips', $bodyData);        }else{            $this->load->view('components/header', $headerData);            $this->load->view('tankers/trips', $bodyData);            $this->load->view('components/footer');        }    }    public function trips_expenses($tanker_id, $month=''){        $headerData = array(            'title' => 'Virik-Logistics | Tankers | Expenses',            'page' => 'tankers'        );        if($month == ''){$month = date('Y-m');}        $bodyData = array(            'expenses' => '',            'profile' => $this->tankers_model->tanker($tanker_id),            'month'=>$month,            'columns'=>array(),        );        $bodyData['expenses'] = $this->tankers_model->trips_expenses_by_month($tanker_id, $month);        if(isset($_GET['print'])){            if(isset($_POST['check'])){                $bodyData['expenses'] = $this->helper_model->filter_records($bodyData['expenses'], $_POST['check'],"expense_id");            }            if(isset($_POST['column'])){                $bodyData['columns'] = $_POST['column'];            }            $this->load->view('tankers/components/print_trips_expenses', $bodyData);        }else{            $this->load->view('components/header', $headerData);            $this->load->view('tankers/trips_expenses', $bodyData);            $this->load->view('components/footer');        }    }    public function other_expenses($tanker_id, $month=''){        $headerData = array(            'title' => 'Virik-Logistics | Tankers | Expenses',            'page' => 'tankers'        );        if($month == ''){$month = date('Y-m');}        $bodyData = array(            'expenses' => '',            'profile' => $this->tankers_model->tanker($tanker_id),            'form_id'=>'',            'someMessage'=>'',            'month'=>$month,            'columns'=>array(),        );        if($this->form_validation->run('add_other_tanker_expense') == true){            if( $this->tankers_model->add_other_expense($tanker_id) == true){                $bodyData['someMessage'] = array('message'=>'Expense Added Successfully!', 'type'=>'alert-success');            }else{                $bodyData['someMessage'] = array('message'=>'Some Unknown database fault happened. please try again a few moments later. Or you can contact your system provider.<br>Thank You', 'type'=>'alert-warning');            }        }        $bodyData['expenses'] = $this->tankers_model->other_expenses_by_month($tanker_id, $month);        //calculating unique form id to prevent from re submission        $bodyData['form_id'] = ($this->helper_model->last_id('other_tankers_expenses')+1);        if(isset($_GET['print'])){            if(isset($_POST['check'])){                $bodyData['expenses'] = $this->helper_model->filter_records($bodyData['expenses'], $_POST['check'],"id");            }            if(isset($_POST['column'])){                $bodyData['columns'] = $_POST['column'];            }            $this->load->view('tankers/components/print_other_expenses', $bodyData);        }else{            $this->load->view('components/header', $headerData);            $this->load->view('tankers/other_expenses', $bodyData);            $this->load->view('components/footer');        }    }    public function profit_loss($tanker_id = '',$from_date='', $to_date='' )    {        if($tanker_id == ''){            $this->index();        }else{            $headerData = array(                'title' => 'Virik-Logistics | Tankers | profit & Loss',                'page' => 'tankers',            );            $bodyData = array(                'profile' => $this->tankers_model->tanker($tanker_id),                'trips_expenses' => '',                'other_tanker_expenses' => '',                'revenues' => '',                'remaining' => 0,                'paid' => 0,                'total_tanker_expense_trips' => 0,                'total_tanker_expense_other' => 0,                'total_driver_expense_trips' => 0,                'total_pd_expense_trips' => 0,                'total_revenue' => 0,                'total_freight'=> 0,                'from_date' => '',                'to_date' => '',            );            $from = $from_date;            $to = $to_date;            if($from == '' || $to == ''){                $from = date('Y-m')."-01";                $to = date('Y-m')."-".date('t');            }else{                if($this->helper_model->bigger_date(easyDate($from),easyDate($to))){                    $temp_to = $to;                    $to = $from;                    $from = $temp_to;                }                //converting date formats                $to = easyDate($to);                $from = easyDate($from);            }            //computing bodyData            $bodyData['trips_expenses'] = $this->profit_loss_model->tanker_trips_expenses($bodyData['profile']->customerId,$tanker_id, $from, $to);            foreach($bodyData['trips_expenses'] as $expense){                $bodyData['total_tanker_expense_trips'] += $expense->tanker_expense;                $bodyData['total_driver_expense_trips'] += $expense->drivers_expense;                $bodyData['total_pd_expense_trips'] += $expense->pd_expense;            }            $bodyData['other_tanker_expenses'] = $this->profit_loss_model->tanker_other_expenses($tanker_id, $from, $to);            foreach($bodyData['other_tanker_expenses'] as $expense){                $bodyData['total_tanker_expense_other'] += $expense->amount;            }            $bodyData['revenues'] = $this->profit_loss_model->tanker_trips_revenues($bodyData['profile']->customerId, $tanker_id, $from, $to);            foreach($bodyData['revenues'] as $revenue){                $bodyData['total_freight'] += $revenue->total_freight;                $bodyData['total_revenue'] += $revenue->net_freight;                $bodyData['paid'] += $revenue->paid;                $bodyData['remaining'] += $revenue->remaining;            }            $bodyData['from_date']=$from;            $bodyData['to_date']=$to;            if(isset($_GET['print'])){                $this->load->view('tankers/components/print_profit_loss', $bodyData);            }else{                $this->load->view('components/header', $headerData);                $this->load->view('tankers/profit_loss', $bodyData);                $this->load->view('components/footer');            }        }    }    public function add_tanker_expense($trip_id = '')    {        $bodyData['trip_id']= $trip_id;        $bodyData['account_titles'] = $this->accounts_model->account_titles();        $this->load->view('tankers/components/add_tanker_expense', $bodyData);    }    public function show($c_id = '')    {        if($c_id == ''){            $this->index();        }else{            $headerData = array(                'title' => 'Virik-Logistics | Customers'            );            $bodyData = array(            );            $this->load->view('components/header', $headerData);            $this->load->view('trips/trip', $bodyData);            $this->load->view('components/footer');        }    }    function _create_captcha(){        /*$words = array( '2', '3', '4', '5', '6','7', '8', '9','0', 'a', 'b','z', 'n', 'b','x', 'y', 'v');        $count = 1;        $word = "";        while($count < 3){            $word = $word.$words[mt_rand(0, 16)];            $count++;        }        $vals = array(            'word'      => strtolower($word),            'img_path'	=> './captcha/',            'img_url'	=> base_url().'captcha/',            'font_path'	=> 'fonts/DENMARK.ttf',            'img_width'	=> '210',            'img_height' => 40,            'expiration' => 20        );        $cap = create_captcha($vals);        return $cap;*/    }    function _validate_tanker_deleting($tanker_id){        $used_in = '';        $trips = $this->db->get_where('trips',array('tanker_id'=>$tanker_id, 'active'=>1))->num_rows();        if($trips >=1){            $used_in = 'Trips, ';        }        $this->db->from('voucher_journal');        $this->db->where('voucher_journal.active',1);        $this->db->where(array(            'voucher_journal.tanker_id'=>$tanker_id,        ));        $accounts = $this->db->get()->num_rows();        if($accounts >= 1){            $used_in .= 'Accounts';        }        if($used_in != ''){            $this->form_validation->set_message('_validate_tanker_deleting','This Tanker is being used in the other parts of the system! e.g('.$used_in.').');            return false;        }        return true;    }    function _check_credentials($str, $data){        /*list($table, $userField, $passField)=explode('.', $data);        //You have to change this line below        if($this->input->post('username') != "" && $this->input->post('password') != "" && $this->input->post('confirmCaptcha') != "" && $this->form_validation->captcha_check($this->input->post('confirmCaptcha'), 'captcha') == true){            //////////////////////////////////////////////////////////////////////////////////////////////////            $userName = $userField.".".$this->input->post('username');            $password = $passField.".".$this->input->post('password');            $credentials = $this->admin_model->check_credentials($table, $userName, $password);            if($credentials == false){                $this->form_validation->set_message('_check_credentials','Invalid Username/Password. Please try again');                return false;            }else{                return true;            }        }else{            return true;        }*/    }    function _check_re_submission($form_id, $table){        if($this->helper_model->re_submission($table, $form_id) == true){            $this->form_validation->set_message('_check_re_submission','Entry failed because of form re-submission.');            return false;        }        return true;    }}/* End of file welcome.php */