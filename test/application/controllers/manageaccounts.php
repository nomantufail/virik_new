<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');include_once(APPPATH."controllers/parentController.php");class ManageAccounts extends ParentController {    //public variables...    public function __construct()    {        parent::__construct();        /**         * including helper classes         **/        include_once(APPPATH."models/helperClasses/dr_cr_status_manager.php");    }    /* The default function that gets called when visiting the page */    public function index($section = '')    {        header("Location: ".base_url()."manageaccounts/white_oil");        die();    }    public function white_oil($section = '')    {        $keys['from'] = (isset($_GET['from']))?$_GET['from']:'';        $keys['to'] = (isset($_GET['to']))?$_GET['to']:'';        $keys['trip_id'] = (isset($_GET['trip_id']))?$_GET['trip_id']:'';        $keys['trip_type'] = (isset($_GET['trip_type']))?$_GET['trip_type']:'';        $keys['trip_master_type'] = (isset($_GET['trip_master_type']))?$_GET['trip_master_type']:'';        $keys['trip_master_types'] = (isset($_GET['trip_master_types']))?$_GET['trip_master_types']:'';        $keys['tanker'] = (isset($_GET['tanker']))?$_GET['tanker']:'';        $keys['entryDate'] = (isset($_GET['entry_date']))?$_GET['entry_date']:'';        $keys['product'] = (isset($_GET['product']))?$_GET['product']:'';        $keys['product_type'] = (isset($_GET['product_type']))?$_GET['product_type']:'white oil';        $keys['source'] = (isset($_GET['source']))?$_GET['source']:'';        $keys['destination'] = (isset($_GET['destination']))?$_GET['destination']:'';        $keys['trips_routes'] = (isset($_GET['trips_route']))?$_GET['trips_route']:'';        $keys['company'] = (isset($_GET['company']))?$_GET['company']:'';        $keys['contractor'] = (isset($_GET['contractor']))?$_GET['contractor']:'';        $keys['cmp_freight_unit'] = (isset($_GET['company_freight_unit']))?$_GET['company_freight_unit']:'';        $keys['wht'] = (isset($_GET['wht']))?$_GET['wht']:'';        $keys['company_commission'] = (isset($_GET['company_commission']))?$_GET['company_commission']:'';        $keys['company_commission_status'] = (isset($_GET['company_commission_status']))?$_GET['company_commission_status']:'';        $keys['contractor_freight_status'] = (isset($_GET['contractor_freight_status']))?$_GET['contractor_freight_status']:'';        $keys['contractor_commission'] = (isset($_GET['contractor_commission']))?$_GET['contractor_commission']:'';        $keys['contractor_commission_status'] = (isset($_GET['contractor_commission_status']))?$_GET['contractor_commission_status']:'';        $keys['customer'] = (isset($_GET['customer']))?$_GET['customer']:'';        $keys['cst_freight_unit'] = (isset($_GET['cst_freight_unit']))?$_GET['cst_freight_unit']:'';        $keys['customer_freight_status'] = (isset($_GET['customer_freight_status']))?$_GET['customer_freight_status']:'';        $keys['account_title'] = (isset($_GET['account_title']))?$_GET['account_title']:'';        $keys['dr_cr'] = (isset($_GET['dr_cr']))?$_GET['dr_cr']:'';        $keys['trip_status'] = (isset($_GET['trip_status']))?$_GET['trip_status']:'';        $keys['searched'] = (isset($_GET['searched']))?true:false;        $keys['sort'] = (isset($_GET['sort_by']))?true:false;        $keys['billed_from'] = (isset($_GET['billed_from']))?$_GET['billed_from']:'';        $keys['billed_to'] = (isset($_GET['billed_to']))?$_GET['billed_to']:'';        $keys['bill_status'] = (isset($_GET['bill_status']))?$_GET['bill_status']:'';        ///////////////////////////////////////////////////////////////        $total_rows = $this->manageaccounts_model->count_searched_white_oil_accounts($keys);        $total_rows = ($total_rows == 0)?1:$total_rows;        /////////////////        //computing the url for page number        $query_string = explode('&page',$_SERVER['QUERY_STRING']);        $query_string = $query_string[0];        //////////////////////////////////        //********Calculating Records/Page***********//        if(isset($_GET['pagination']) && $_GET['pagination'] == 'false'){            $per_page = $total_rows;        }else{            $per_page = 'false';        }        /*if(isset($_GET['print'])){            $per_page = $total_rows;        }*/        /////****************************************//        $config = $this->helper_model->pagination_configs("manageaccounts/white_oil?".$query_string, "", $total_rows, $per_page);        $this->pagination->initialize($config);        $pageNumber = 0;        if(isset($_GET['page'])){            $pageNumber = $_GET['page'];            if($pageNumber>=0){$pageNumber = $pageNumber;}else{ $pageNumber = 0;}        }        //////////////////////////////////////////////////////////////////////////////////        $headerData = array(            'title' => 'Virik Logistics | Accounts',            'page' => 'manageaccounts',        );        $bodyData = array(            'accounts' => '',            'section' => '',            'someMessage' => '',            'month' => '',            'columns'=>array(),            'pages'=>$this->pagination->create_links(),        );        //saving voucher        if(isset($_POST['save_voucher'])){            $this->form_validation->set_rules('form_id', 'Form Re-Submission', 'required|numeric|callback__check_re_submission[voucher_journal]');            if($this->form_validation->run() == true){                if($this->manageaccounts_model->save_voucher() == true){                    $bodyData['someMessage'] = array('message'=>'voucher saved Successfully!', 'type'=>'alert-success');                }else{                    $bodyData['someMessage'] = array('message'=>'Some Unknown database fault accured. please try again a few moments later. Or you can contact your system provider.<br>Thank You', 'type'=>'alert-warning');                }            }        }        //saving custom voucher        if(isset($_POST['save_custom_voucher'])){            $this->form_validation->set_rules('form_id', 'Form Re-Submission', 'required|numeric|callback__check_re_submission[voucher_journal]');            if($this->form_validation->run() == true){                if($this->manageaccounts_model->save_custom_voucher() == true){                    $bodyData['someMessage'] = array('message'=>'voucher saved Successfully!', 'type'=>'alert-success');                }else{                    $bodyData['someMessage'] = array('message'=>'Some Unknown database fault accured. please try again a few moments later. Or you can contact your system provider.<br>Thank You', 'type'=>'alert-warning');                }            }        }        //Billing trips        if(isset($_POST['bill_trips'])){            $this->form_validation->set_rules('details_ids', 'Trip ids for billing', 'required');            if($this->form_validation->run() == true){                $detail_ids = explode('_',$this->input->post('details_ids'));                if($this->manageaccounts_model->bill_trips($detail_ids) == true){                    $bodyData['someMessage'] = array('message'=>'Billed Successfully!', 'type'=>'alert-success');                }else{                    $bodyData['someMessage'] = array('message'=>'Some Unknown database fault accured. please try again a few moments later. Or you can contact your system provider.<br>Thank You', 'type'=>'alert-warning');                }            }        }        //Un-Billing trips        if(isset($_POST['un_bill_trips'])){            $this->form_validation->set_rules('un_bill_trips_ids', 'Trip ids for un-billing', 'required');            if($this->form_validation->run() == true){                $detail_ids = explode('_',$this->input->post('un_bill_trips_ids'));                if($this->manageaccounts_model->un_bill_trips($detail_ids) == true){                    $bodyData['someMessage'] = array('message'=>'Un-Billed Successfully!', 'type'=>'alert-success');                }else{                    $bodyData['someMessage'] = array('message'=>'Some Unknown database fault accured. please try again a few moments later. Or you can contact your system provider.<br>Thank You', 'type'=>'alert-warning');                }            }        }        $accounts = $this->manageaccounts_model->search_white_oil($keys, $config["per_page"], $pageNumber);        $dr_cr_status_manager = $this->manageaccounts_model->dr_cr_statuses($accounts);        $bodyData['accounts'] = $accounts;        $bodyData['dr_cr_status_manager'] = $dr_cr_status_manager;        $bodyData['companies'] = $this->companies_model->companies();        $bodyData['customers'] = $this->customers_model->customers();        $bodyData['products'] = $this->routes_model->products();        $bodyData['cities'] = $this->routes_model->cities();        $bodyData['trips_routes'] = $this->routes_model->trips_routes();        $bodyData['contractors'] = $this->carriageContractors_model->carriageContractors();        $bodyData['tankers'] = $this->tankers_model->tankers();        $bodyData['account_titles'] = $this->accounts_model->account_titles();        $bodyData['date_limits'] = $this->helper_model->dates_limit();        $bodyData['font_size'] = $this->settings_model->system_settings('printing font size');        if(isset($_GET['print'])){            if(isset($_POST['check'])){                $trip_ids = $this->helper_model->trip_ids_from_given_detail_ids($_POST['check']);                $bodyData['accounts'] = $this->helper_model->filter_records($bodyData['accounts'], $trip_ids,"trip_id");            }            if(isset($_POST['column'])){                $bodyData['columns'] = $_POST['column'];            }            $this->load->view('manageaccounts/components/print_accounts', $bodyData);        }        else if(isset($_GET['export']))        {            if(isset($_POST['check'])){                $trip_ids = $this->helper_model->trip_ids_from_given_detail_ids($_POST['check']);                $bodyData['accounts'] = $this->helper_model->filter_records($bodyData['accounts'], $trip_ids,"trip_id");            }            if(isset($_POST['column'])){                $bodyData['columns'] = $_POST['column'];            }            $this->load->view('manageaccounts/components/export_accounts', $bodyData);        }        else        {            $this->load->view('components/header', $headerData);            $this->load->view('manageaccounts/white_oil_test', $bodyData);            $this->load->view('components/footer');        }    }    public function black_oil($section = '')    {        $keys['from'] = (isset($_GET['from']))?$_GET['from']:'';        $keys['to'] = (isset($_GET['to']))?$_GET['to']:'';        $keys['trip_id'] = (isset($_GET['trip_id']))?$_GET['trip_id']:'';        $keys['trip_type'] = (isset($_GET['trip_type']))?$_GET['trip_type']:'';        $keys['trip_master_type'] = (isset($_GET['trip_master_type']))?$_GET['trip_master_type']:'';        $keys['trip_master_types'] = (isset($_GET['trip_master_types']))?$_GET['trip_master_types']:'';        $keys['tanker'] = (isset($_GET['tanker']))?$_GET['tanker']:'';        $keys['entryDate'] = (isset($_GET['entry_date']))?$_GET['entry_date']:'';        $keys['product'] = (isset($_GET['product']))?$_GET['product']:'';        $keys['product_type'] = (isset($_GET['product_type']))?$_GET['product_type']:'black oil';        $keys['source'] = (isset($_GET['source']))?$_GET['source']:'';        $keys['destination'] = (isset($_GET['destination']))?$_GET['destination']:'';        $keys['trips_routes'] = (isset($_GET['trips_route']))?$_GET['trips_route']:'';        $keys['company'] = (isset($_GET['company']))?$_GET['company']:'';        $keys['contractor'] = (isset($_GET['contractor']))?$_GET['contractor']:'';        $keys['cmp_freight_unit'] = (isset($_GET['company_freight_unit']))?$_GET['company_freight_unit']:'';        $keys['wht'] = (isset($_GET['wht']))?$_GET['wht']:'';        $keys['company_commission'] = (isset($_GET['company_commission']))?$_GET['company_commission']:'';        $keys['company_commission_status'] = (isset($_GET['company_commission_status']))?$_GET['company_commission_status']:'';        $keys['contractor_freight_status'] = (isset($_GET['contractor_freight_status']))?$_GET['contractor_freight_status']:'';        $keys['contractor_commission'] = (isset($_GET['contractor_commission']))?$_GET['contractor_commission']:'';        $keys['contractor_commission_status'] = (isset($_GET['contractor_commission_status']))?$_GET['contractor_commission_status']:'';        $keys['customer'] = (isset($_GET['customer']))?$_GET['customer']:'';        $keys['cst_freight_unit'] = (isset($_GET['cst_freight_unit']))?$_GET['cst_freight_unit']:'';        $keys['customer_freight_status'] = (isset($_GET['customer_freight_status']))?$_GET['customer_freight_status']:'';        $keys['account_title'] = (isset($_GET['account_title']))?$_GET['account_title']:'';        $keys['dr_cr'] = (isset($_GET['dr_cr']))?$_GET['dr_cr']:'';        $keys['trip_status'] = (isset($_GET['trip_status']))?$_GET['trip_status']:'';        $keys['searched'] = (isset($_GET['searched']))?true:false;        $keys['sort'] = (isset($_GET['sort_by']))?true:false;        $keys['billed_from'] = (isset($_GET['billed_from']))?$_GET['billed_from']:'';        $keys['billed_to'] = (isset($_GET['billed_to']))?$_GET['billed_to']:'';        $keys['bill_status'] = (isset($_GET['bill_status']))?$_GET['bill_status']:'';        ///////////////////////////////////////////////////////////////        $total_rows = $this->manageaccounts_model->count_searched_black_oil_accounts($keys);        $total_rows = ($total_rows == 0)?1:$total_rows;        /////////////////        //computing the url for page number        $query_string = explode('&page',$_SERVER['QUERY_STRING']);        $query_string = $query_string[0];        //////////////////////////////////        //********Calculating Records/Page***********//        if(isset($_GET['pagination']) && $_GET['pagination'] == 'false'){            $per_page = $total_rows;        }else{            $per_page = 'false';        }        /*if(isset($_GET['print'])){            $per_page = $total_rows;        }*/        /////****************************************//        $config = $this->helper_model->pagination_configs("manageaccounts/black_oil?".$query_string, "", $total_rows, $per_page);        $this->pagination->initialize($config);        $pageNumber = 0;        if(isset($_GET['page'])){            $pageNumber = $_GET['page'];            if($pageNumber>=0){$pageNumber = $pageNumber;}else{ $pageNumber = 0;}        }        //////////////////////////////////////////////////////////////////////////////////        $headerData = array(            'title' => 'Virik Logistics | Accounts',            'page' => 'manageaccounts',        );        $bodyData = array(            'accounts' => '',            'section' => '',            'someMessage' => '',            'month' => '',            'columns'=>array(),            'pages'=>$this->pagination->create_links(),        );        //saving voucher        if(isset($_POST['save_voucher'])){            $this->form_validation->set_rules('form_id', 'Form Re-Submission', 'required|numeric|callback__check_re_submission[voucher_journal]');            if($this->form_validation->run() == true){                if($this->manageaccounts_model->save_voucher() == true){                    $bodyData['someMessage'] = array('message'=>'voucher saved Successfully!', 'type'=>'alert-success');                }else{                    $bodyData['someMessage'] = array('message'=>'Some Unknown database fault accured. please try again a few moments later. Or you can contact your system provider.<br>Thank You', 'type'=>'alert-warning');                }            }        }        //saving custom voucher        if(isset($_POST['save_custom_voucher'])){            $this->form_validation->set_rules('form_id', 'Form Re-Submission', 'required|numeric|callback__check_re_submission[voucher_journal]');            if($this->form_validation->run() == true){                if($this->manageaccounts_model->save_custom_voucher() == true){                    $bodyData['someMessage'] = array('message'=>'voucher saved Successfully!', 'type'=>'alert-success');                }else{                    $bodyData['someMessage'] = array('message'=>'Some Unknown database fault accured. please try again a few moments later. Or you can contact your system provider.<br>Thank You', 'type'=>'alert-warning');                }            }        }        //Billing trips        if(isset($_POST['bill_trips'])){            $this->form_validation->set_rules('details_ids', 'Trip ids for billing', 'required');            if($this->form_validation->run() == true){                $detail_ids = explode('_',$this->input->post('details_ids'));                if($this->manageaccounts_model->bill_trips($detail_ids) == true){                    $bodyData['someMessage'] = array('message'=>'Billed Successfully!', 'type'=>'alert-success');                }else{                    $bodyData['someMessage'] = array('message'=>'Some Unknown database fault accured. please try again a few moments later. Or you can contact your system provider.<br>Thank You', 'type'=>'alert-warning');                }            }        }        //Un-Billing trips        if(isset($_POST['un_bill_trips'])){            $this->form_validation->set_rules('un_bill_trips_ids', 'Trip ids for un-billing', 'required');            if($this->form_validation->run() == true){                $detail_ids = explode('_',$this->input->post('un_bill_trips_ids'));                if($this->manageaccounts_model->un_bill_trips($detail_ids) == true){                    $bodyData['someMessage'] = array('message'=>'Un-Billed Successfully!', 'type'=>'alert-success');                }else{                    $bodyData['someMessage'] = array('message'=>'Some Unknown database fault accured. please try again a few moments later. Or you can contact your system provider.<br>Thank You', 'type'=>'alert-warning');                }            }        }        $accounts = $this->manageaccounts_model->search_black_oil($keys, $config["per_page"], $pageNumber);        $dr_cr_status_manager = $this->manageaccounts_model->dr_cr_statuses($accounts);        $bodyData['accounts'] = $accounts;        $bodyData['dr_cr_status_manager'] = $dr_cr_status_manager;        $bodyData['companies'] = $this->companies_model->companies();        $bodyData['customers'] = $this->customers_model->customers();        $bodyData['products'] = $this->routes_model->products();        $bodyData['cities'] = $this->routes_model->cities();        $bodyData['trips_routes'] = $this->routes_model->trips_routes();        $bodyData['contractors'] = $this->carriageContractors_model->carriageContractors();        $bodyData['tankers'] = $this->tankers_model->tankers();        $bodyData['account_titles'] = $this->accounts_model->account_titles();        $bodyData['date_limits'] = $this->helper_model->dates_limit();        $bodyData['font_size'] = $this->settings_model->system_settings('printing font size');        if(isset($_GET['print'])){            if(isset($_POST['check'])){                $trip_ids = $this->helper_model->trip_ids_from_given_detail_ids($_POST['check']);                $bodyData['accounts'] = $this->helper_model->filter_records($bodyData['accounts'], $trip_ids,"trip_id");            }            if(isset($_POST['column'])){                $bodyData['columns'] = $_POST['column'];            }            $this->load->view('manageaccounts/components/print_black_oil', $bodyData);        }        else if(isset($_GET['export']))        {            if(isset($_POST['check'])){                $trip_ids = $this->helper_model->trip_ids_from_given_detail_ids($_POST['check']);                $bodyData['accounts'] = $this->helper_model->filter_records($bodyData['accounts'], $trip_ids,"trip_id");            }            if(isset($_POST['column'])){                $bodyData['columns'] = $_POST['column'];            }            $this->load->view('manageaccounts/components/export_black_oil', $bodyData);        }        else        {            $this->load->view('components/header', $headerData);            $this->load->view('manageaccounts/black_oil', $bodyData);            $this->load->view('components/footer');        }    }    public function open_voucher_for_user($voucher_type, $product_type='white_oil')    {        include_once(APPPATH."models/helperClasses/Universal_Voucher.php");        include_once(APPPATH."models/helperClasses/Voucher_Entry.php");        $tanker_id = 0;        //fetching trips        $trips_details_ids_array = explode('_',$_POST['ids']);        //$trips_ids = $this->manageaccounts_model->fetch_trips_ids_by_trips_details_ids($trips_details_ids_array);        $trips = $this->trips_model->parametrized_trips_engine_for_manageaccounts($trips_details_ids_array, "");        /*------ Applying Shortage Details ------*/        $trips = $this->manageaccounts_model->apply_shortage_details($trips);        /*---------------------------------------*/        ////////////////////////////////////////        /* Change for new updated views system */        $new_trips = array();        if($product_type == 'white_oil')        {            $this->db->select('*');            $this->db->where_in('trip_detail_id',$trips_details_ids_array);            $new_trips = $this->db->get('manage_accounts_white_oil_view')->result();        }        else        {            $this->db->select('*');            $this->db->where_in('trip_detail_id',$trips_details_ids_array);            $new_trips = $this->db->get('manage_accounts_black_oil_view')->result();        }        /*---------------------------------------------------------------------*/        $bodyData['titles'] = $this->accounts_model->account_titles();        $bodyData['details_ids'] = $_POST['ids'];        $bodyData['tankers']=$this->tankers_model->tankers();        $bodyData['form_id'] = ($this->helper_model->last_id('voucher_journal')+1);        $bodyData['date_limits'] = $this->helper_model->dates_limit();        $bodyData['manage_account_type'] = ($product_type == 'black_oil')?$product_type:'';        $debit_entry = array(            'agent_type'=>'',            'agent'=>'',        );        $bodyData['debit_entry'] = $debit_entry;        switch($voucher_type)        {            case "shortage_amount":                //fetching total freight                $total_shortage_amount = 0;                foreach($new_trips as $trip){                    $total_shortage_amount += $trip->shortage_amount;                }                $bodyData['total_amount'] = $total_shortage_amount;                $bodyData['transaction_column'] = 'shortage_amount';                $this->load->view("accounts/components/vouchers/contractor_freight_voucher_for_user", $bodyData);                break;            case "contractor_freight":                //fetching total freight                $total_contractor_freight = 0;                foreach($new_trips as $trip){                    if($product_type == 'black_oil')                    {                        $total_contractor_freight += $trip->net_payables;                    }else{                        $total_contractor_freight += $trip->contractor_freight_amount;                    }                }                $bodyData['total_amount'] = round($total_contractor_freight, 3);                $bodyData['transaction_column'] = 'contractor_freight';                $this->load->view("accounts/components/vouchers/contractor_freight_voucher_for_user", $bodyData);                break;            case "contractor_freight_without_shortage":                //fetching total freight                $total_contractor_freight_without_shortage = 0;                foreach($new_trips as $trip){                    $total_contractor_freight_without_shortage += $trip->contractor_freight_without_shortage;                }                $bodyData['total_amount'] = round($total_contractor_freight_without_shortage, 3);                $bodyData['transaction_column'] = 'contractor_freight_without_shortage';                $this->load->view("accounts/components/vouchers/contractor_freight_voucher_for_user", $bodyData);                break;            case "company_total_freight":                //fetching total freight                $total_freight = 0;                foreach($new_trips as $trip){                    $total_freight += $trip->total_freight_cmp;                }                $bodyData['total_amount'] = round($total_freight, 3);                $bodyData['transaction_column'] = 'company_total_freight';                $this->load->view("accounts/components/vouchers/contractor_freight_voucher_for_user", $bodyData);                break;            case "company_wht":                //fetching total freight                $total_wht = 0;                foreach($new_trips as $trip){                    $total_wht += $trip->wht_amount;                }                $bodyData['total_amount'] = round($total_wht, 3);                $bodyData['transaction_column'] = 'company_wht';                $this->load->view("accounts/components/vouchers/contractor_freight_voucher_for_user", $bodyData);                break;            case "company_commission":                //fetching total freight                $total_amount = 0;                foreach($new_trips as $trip){                    $total_amount += $trip->company_commission_amount;                }                $bodyData['total_amount'] = round($total_amount, 3);                $bodyData['transaction_column'] = 'company_commission';                $this->load->view("accounts/components/vouchers/contractor_freight_voucher_for_user", $bodyData);                break;            case "contractor_commission":                //fetching total freight                $total_amount = 0;                foreach($new_trips as $trip){                    $total_amount += $trip->contractor_commission_amount;                }                $bodyData['total_amount'] = round($total_amount, 3);                $bodyData['transaction_column'] = 'contractor_commission';                $this->load->view("accounts/components/vouchers/contractor_freight_voucher_for_user", $bodyData);                break;            case "customer_freight":                //fetching total freight                $total_amount = 0;                foreach($new_trips as $trip){                    if($product_type == 'black_oil')                    {                        $total_amount += $trip->customer_freight;                    }else{                        $total_amount += $trip->customer_freight_amount;                    }                }                $bodyData['total_amount'] = round($total_amount, 3);                $bodyData['transaction_column'] = 'customer_freight';                $agent_type = 'customer';                $agent = '';                if(isset($_GET['customer']) && $_GET['customer'] != '')                {                    $agent_type = 'customer';                    $agent = $_GET['customer'];                }                $debit_entry = array(                    'agent_type'=>$agent_type,                    'agent'=>$agent,                );                $bodyData['debit_entry'] = $debit_entry;                $this->load->view("accounts/components/vouchers/contractor_freight_voucher_for_user", $bodyData);                break;            case "customer_freight_without_shortage":                //fetching total freight                $total_amount = 0;                foreach($new_trips as $trip){                    $total_amount += $trip->customer_freight_without_shortage;                }                $bodyData['total_amount'] = round($total_amount, 3);                $bodyData['transaction_column'] = 'customer_freight_without_shortage';                $this->load->view("accounts/components/vouchers/contractor_freight_voucher_for_user", $bodyData);                break;            case "service_charges":                //fetching total freight                $total_amount = 0;                foreach($new_trips as $trip){                    $service_charges = 0;                    if($product_type == 'white_oil'){                        $service_charges = $trip->total_freight_cmp - $trip->company_commission_amount - $trip->customer_freight_amount - $trip->contractor_commission_amount - $trip->wht_amount;                        if($service_charges > -0.1 && $service_charges < 0.1){                            $service_charges = 0;                        }                    }else{                        $service_charges = $trip->freight_amount_cmp - $trip->company_commission_amount - $trip->customer_freight - $trip->contractor_commission_amount - $trip->wht_amount - $trip->shortage_amount;                        if($service_charges > -0.1 && $service_charges < 0.1){                            $service_charges = 0;                        }                    }                    $total_amount += $service_charges;                }                $bodyData['total_amount'] = round($total_amount, 3);                $bodyData['transaction_column'] = 'service_charges';                $this->load->view("accounts/components/vouchers/contractor_freight_voucher_for_user", $bodyData);                break;            case "payable_before_tax":                //fetching total freight                $total_amount = 0;                foreach($trips as $trip){                    foreach($trip->trip_related_details as $detail){                        if(in_array($detail->product_detail_id, $trips_details_ids_array)){                            $total_amount += $detail->get_payable_before_tax_for_black_oil();                        }                    }                }                $bodyData['total_amount'] = round($total_amount, 3);                $bodyData['transaction_column'] = 'payable_before_tax';                $this->load->view("accounts/components/vouchers/contractor_freight_voucher_for_user", $bodyData);                break;        }    }    public function open_custom_voucher_for_user()    {        $bodyData['titles'] = $this->accounts_model->account_titles();        $bodyData['form_id'] = ($this->helper_model->last_id('voucher_journal')+1);        $bodyData['tankers']=$this->tankers_model->tankers();        $bodyData['date_limits'] = $this->helper_model->dates_limit();        $this->load->view("accounts/components/vouchers/custom_voucher_for_user", $bodyData);    }    public function refresh()    {        $headerData = array(            'title' => 'Virik Logistics | Manage Accounts',            'page' => 'manageaccounts',        );        $bodyData['message'] = '';        $this->load->view('components/header', $headerData);        $this->load->view("manageaccounts/components/messages/refresh_success", $bodyData);        $this->load->view('components/footer');    }    function _create_captcha(){        /*$words = array( '2', '3', '4', '5', '6','7', '8', '9','0', 'a', 'b','z', 'n', 'b','x', 'y', 'v');        $count = 1;        $word = "";        while($count < 3){            $word = $word.$words[mt_rand(0, 16)];            $count++;        }        $vals = array(            'word'      => strtolower($word),            'img_path'	=> './captcha/',            'img_url'	=> base_url().'captcha/',            'font_path'	=> 'fonts/DENMARK.ttf',            'img_width'	=> '210',            'img_height' => 40,            'expiration' => 20        );        $cap = create_captcha($vals);        return $cap;*/    }    function _validate_contractor_payment_amount($amount){        $previous_payments = $this->accounts_model->contractor_payments($this->input->post('trip_detail_id'), $this->input->post('contractor_id'));        $paid = 0;        foreach($previous_payments as $payment){            $paid+= $payment->amount;        }        if($amount > $this->input->post('actual_freight')-$paid){            $this->form_validation->set_message('_validate_contractor_payment_amount','Entry failed because of Invalid Freight Amount. Please try again.');            return false;        }        return true;    }    function _validate_contractor_deleting($contractor_id){        $used_in = '';        $trips = $this->db->get_where('trips',array('contractor_id'=>$contractor_id, 'active'=>1))->num_rows();        if($trips >=1){            $used_in = 'Trips, ';        }        $this->db->from('voucher_journal');        $this->db->join('voucher_entry','voucher_entry.journal_voucher_id = voucher_journal.id','left');        $where = "(voucher_entry.related_contractor = ".$contractor_id.")";        $this->db->where($where);        $this->db->where('voucher_journal.active',1);        $accounts = $this->db->get()->num_rows();        if($accounts >= 1){            $used_in .= 'Accounts';        }        if($used_in != ''){            $this->form_validation->set_message('_validate_contractor_deleting','This Contractor is being used in the other parts of the system! e.g('.$used_in.').');            return false;        }        return true;    }    function _check_credentials($str, $data){        /*list($table, $userField, $passField)=explode('.', $data);        //You have to change this line below        if($this->input->post('username') != "" && $this->input->post('password') != "" && $this->input->post('confirmCaptcha') != "" && $this->form_validation->captcha_check($this->input->post('confirmCaptcha'), 'captcha') == true){            //////////////////////////////////////////////////////////////////////////////////////////////////            $userName = $userField.".".$this->input->post('username');            $password = $passField.".".$this->input->post('password');            $credentials = $this->admin_model->check_credentials($table, $userName, $password);            if($credentials == false){                $this->form_validation->set_message('_check_credentials','Invalid Username/Password. Please try again');                return false;            }else{                return true;            }        }else{            return true;        }*/    }    function _check_re_submission($form_id, $table){        if($this->helper_model->re_submission($table, $form_id) == true){            $this->form_validation->set_message('_check_re_submission','Entry failed because of form re-submission. It is possible that form was submitted twice.');            return false;        }        return true;    }}/* End of file welcome.php *//* Location: ./application/controllers/welcome.php */