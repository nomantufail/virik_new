<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');include_once(APPPATH."controllers/parentController.php");class ManageFreights extends ParentController {    //public variables...    public $login;    public function __construct()    {        parent::__construct();    }    /* The default function that gets called when visiting the page */    public function index($section = '')    {        $headerData = array(            'title' => 'Virik-Logistics | Pending Freights',            'page' => 'manage_freights',        );        $bodyData = array(            'date'=>date('Y-m-d'),            'days'=>90,            'pending_freights' => '',            'section' => '',            'someMessage' => '',            'pages' => /*$this->pagination->create_links()*/'',            'columns' => array(),        );        if($section == '' || $section == 'all'){$bodyData['section'] = 'all';}else if($section== 'add'){ $bodyData['section'] = 'add';}        if(isset($_GET['date'])){            $bodyData['date'] = $_GET['date'];        }        if(isset($_GET['days'])){            $bodyData['days'] = $_GET['days'];        }        $bodyData['pending_freights'] = $this->manageFreights_model->pending_freights($bodyData['date'], $bodyData['days']);        if(isset($_GET['print'])){            if(isset($_POST['check'])){                $bodyData['pending_freights'] = $this->helper_model->filter_records($bodyData['pending_freights'], $_POST['check'],"trip_id");            }            if(isset($_POST['column'])){                $bodyData['columns'] = $_POST['column'];            }            $this->load->view('manageFreights/components/print_pendingFreights', $bodyData);        }else{            $this->load->view('components/header', $headerData);            $this->load->view('manageFreights/welcome', $bodyData);            $this->load->view('components/footer');        }    }   /* public function accounts($c_id = '', $month ='' )    {        if($c_id == ''){            $this->index();        }else{            $headerData = array(                'title' => 'Virik-Logistics | Companies | Accounts',                'page' => 'companies',            );            if($month == ''){$month = date('Y-m');}            $bodyData = array(                'profile' => $this->companies_model->company($c_id),                'accounts' => '',                'section' => '',                'someMessage' => '',                'month' => $month,            );            if($this->form_validation->run('add_company_payment') == true){                if( $this->accounts_model->add_company_payment() == true){                    $bodyData['someMessage'] = array('message'=>'Payment Added Successfully!', 'type'=>'alert-success');                }else{                    $bodyData['someMessage'] = array('message'=>'Some Unknown database fault happened. please try again a few moments later. Or you can contact your system provider.<br>Thank You', 'type'=>'alert-warning');                }            }            $bodyData['accounts'] = $this->accounts_model->company($c_id, $month);            if(isset($_GET['print'])){                if(isset($_POST['check'])){                    $bodyData['accounts'] = $this->helper_model->filter_records($bodyData['accounts'], $_POST['check'],"trip_id");                }                $this->load->view('companies/components/print_accounts', $bodyData);            }else{            $this->load->view('components/header', $headerData);            $this->load->view('companies/accounts', $bodyData);            $this->load->view('components/footer');            }        }    }*/    public function add_payment($trip_id, $company_id){        $bodyData = array(            'previous_payments' => $this->accounts_model->company_payments($trip_id, $company_id),            'form_id'=>($this->helper_model->last_id('company_accounts')+1),            'trip_id'=>$trip_id,            'company_id'=>$company_id,        );        $this->load->view('companies/components/add_payment', $bodyData);    }    public function show_payments($agent, $trip_id, $agent_id){        $payments = array();        if($agent == 'contractor'){            $payments = $this->accounts_model->contractor_payments($trip_id, $agent_id);        }else if($agent == 'customer'){            $payments = $this->accounts_model->customer_payments($trip_id, $agent_id);        }        $bodyData = array(            'previous_payments' => $payments,            'form_id'=>($this->helper_model->last_id('customer_accounts')+1),            'trip_id'=>$trip_id,            'agent'=>$agent,        );        $this->load->view('companies/components/show_payments', $bodyData);    }    public function contact($c_id = '', $req ='' )    {        if($c_id == ''){            $this->index();        }else{            $headerData = array(                'title' => 'Virik-Logistics | Carriage | Contact',                'page' => 'companies',            );            $bodyData = array(                'contact' => $this->companies_model->company($c_id),            );            $this->load->view('components/header', $headerData);    //HEADER DATA            //check if we some data received of not against the request?            if($bodyData['contact'] != ''){                $this->load->view('companies/contact', $bodyData);            }else{                $this->load->view('components/recordNotFound');            }            $this->load->view('components/footer');     //footer data        }    }    public function home()    {    }    function _create_captcha(){        /*$words = array( '2', '3', '4', '5', '6','7', '8', '9','0', 'a', 'b','z', 'n', 'b','x', 'y', 'v');        $count = 1;        $word = "";        while($count < 3){            $word = $word.$words[mt_rand(0, 16)];            $count++;        }        $vals = array(            'word'      => strtolower($word),            'img_path'	=> './captcha/',            'img_url'	=> base_url().'captcha/',            'font_path'	=> 'fonts/DENMARK.ttf',            'img_width'	=> '210',            'img_height' => 40,            'expiration' => 20        );        $cap = create_captcha($vals);        return $cap;*/    }    function _check_credentials($str, $data){        /*list($table, $userField, $passField)=explode('.', $data);        //You have to change this line below        if($this->input->post('username') != "" && $this->input->post('password') != "" && $this->input->post('confirmCaptcha') != "" && $this->form_validation->captcha_check($this->input->post('confirmCaptcha'), 'captcha') == true){            //////////////////////////////////////////////////////////////////////////////////////////////////            $userName = $userField.".".$this->input->post('username');            $password = $passField.".".$this->input->post('password');            $credentials = $this->admin_model->check_credentials($table, $userName, $password);            if($credentials == false){                $this->form_validation->set_message('_check_credentials','Invalid Username/Password. Please try again');                return false;            }else{                return true;            }        }else{            return true;        }*/    }}/* End of file welcome.php *//* Location: ./application/controllers/welcome.php */